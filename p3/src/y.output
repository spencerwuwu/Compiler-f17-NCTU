Terminals unused in grammar

   DEF


State 70 conflicts: 1 shift/reduce
State 192 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: ID $@1 MK_SEMICOLON program_body END ID

    3 program_body: opt_decl_list opt_func_decl_list compound_stmt

    4 opt_decl_list: decl_list
    5              | %empty

    6 $@2: %empty

    7 decl_list: decl_list $@2 decl

    8 $@3: %empty

    9 decl_list: $@3 decl

   10 $@4: %empty

   11 decl: VAR id_list MK_COLON scalar_type $@4 MK_SEMICOLON
   12     | VAR id_list MK_COLON sort_array_type MK_SEMICOLON

   13 $@5: %empty

   14 decl: VAR id_list MK_COLON str_literal_const $@5 MK_SEMICOLON

   15 $@6: %empty

   16 decl: VAR id_list MK_COLON bool_literal_const $@6 MK_SEMICOLON
   17     | VAR id_list MK_COLON int_literal_const MK_SEMICOLON
   18     | VAR id_list MK_COLON d_literal_const MK_SEMICOLON

   19 int_const: INT_CONST
   20          | OCTAL_CONST

   21 int_literal_const: int_const
   22                  | OP_SUB int_const

   23 d_literal_const: FLOAT_CONST
   24                | OP_SUB FLOAT_CONST
   25                | SCIENTIFIC
   26                | OP_SUB SCIENTIFIC

   27 str_literal_const: STR_CONST

   28 bool_literal_const: TRUE
   29                   | FALSE

   30 opt_func_decl_list: func_decl_list
   31                   | %empty

   32 func_decl_list: func_decl_list func_decl
   33               | func_decl

   34 $@7: %empty

   35 $@8: %empty

   36 $@9: %empty

   37 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON $@8 BEG function_body END $@9 END ID

   38 function_body: opt_decl_list opt_stmt_list compound_stmt
   39              | opt_decl_list opt_stmt_list

   40 opt_param_list: param_list
   41               | %empty

   42 $@10: %empty

   43 param_list: param_list MK_SEMICOLON $@10 param

   44 $@11: %empty

   45 param_list: $@11 param

   46 param: id_list MK_COLON type

   47 id_list: id_list MK_COMMA ID
   48        | ID

   49 opt_type: MK_COLON type
   50         | %empty

   51 type: scalar_type
   52     | sort_array_type

   53 scalar_type: INTEGER
   54            | REAL
   55            | BOOLEAN
   56            | STRING

   57 sort_array_type: array_type

   58 array_type: ARRAY int_const TO int_const OF scalar_type
   59           | ARRAY int_const TO int_const OF array_type

   60 stmt: compound_stmt
   61     | simple_stmt
   62     | cond_stmt
   63     | while_stmt
   64     | for_stmt
   65     | return_stmt
   66     | proc_call_stmt

   67 $@12: %empty

   68 compound_stmt: BEG $@12 opt_decl_list opt_stmt_list END

   69 opt_stmt_list: stmt_list
   70              | %empty

   71 stmt_list: stmt_list stmt
   72          | stmt

   73 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON
   74            | PRINT boolean_expr MK_SEMICOLON
   75            | READ boolean_expr MK_SEMICOLON

   76 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

   77 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF
   78          | IF boolean_expr THEN opt_stmt_list END IF

   79 while_stmt: WHILE boolean_expr DO opt_stmt_list END DO

   80 $@13: %empty

   81 for_stmt: FOR ID $@13 OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

   82 return_stmt: RETURN boolean_expr MK_SEMICOLON

   83 opt_boolean_expr_list: boolean_expr_list
   84                      | %empty

   85 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr
   86                  | boolean_expr

   87 boolean_expr: boolean_expr OP_OR boolean_term
   88             | boolean_term

   89 boolean_term: boolean_term OP_AND boolean_factor
   90             | boolean_factor

   91 boolean_factor: OP_NOT boolean_factor
   92               | relop_expr

   93 relop_expr: expr rel_op expr
   94           | expr

   95 rel_op: OP_LT
   96       | OP_LE
   97       | OP_EQ
   98       | OP_GE
   99       | OP_GT
  100       | OP_NE

  101 expr: expr add_op term
  102     | term

  103 add_op: OP_ADD
  104       | OP_SUB

  105 term: term mul_op factor
  106     | factor

  107 mul_op: OP_MUL
  108       | OP_DIV
  109       | OP_MOD

  110 factor: var_ref
  111       | OP_SUB var_ref
  112       | MK_LPAREN boolean_expr MK_RPAREN
  113       | OP_SUB MK_LPAREN boolean_expr MK_RPAREN
  114       | ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
  115       | OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
  116       | int_literal_const
  117       | d_literal_const
  118       | str_literal_const

  119 var_ref: ID
  120        | var_ref dim

  121 dim: MK_LB boolean_expr MK_RB


Terminals, with rules where they appear

$end (0) 0
error (256)
ARRAY (258) 58 59
BEG (259) 37 68
BOOLEAN (260) 55
DEF (261)
DO (262) 79 81
ELSE (263) 77
END (264) 2 37 68 77 78 79 81
FALSE (265) 29
FOR (266) 81
INTEGER (267) 53
IF (268) 77 78
OF (269) 58 59
PRINT (270) 74
READ (271) 75
REAL (272) 54
RETURN (273) 82
STRING (274) 56
THEN (275) 77 78
TO (276) 58 59 81
TRUE (277) 28
VAR (278) 11 12 14 16 17 18
WHILE (279) 79
ID (280) 2 37 47 48 76 81 114 115 119
OCTAL_CONST (281) 20
INT_CONST (282) 19
FLOAT_CONST (283) 23 24
SCIENTIFIC (284) 25 26
STR_CONST (285) 27
OP_ADD (286) 103
OP_SUB (287) 22 24 26 104 111 113 115
OP_MUL (288) 107
OP_DIV (289) 108
OP_MOD (290) 109
OP_ASSIGN (291) 73 81
OP_EQ (292) 97
OP_NE (293) 100
OP_GT (294) 99
OP_LT (295) 95
OP_GE (296) 98
OP_LE (297) 96
OP_AND (298) 89
OP_OR (299) 87
OP_NOT (300) 91
MK_COMMA (301) 47 85
MK_COLON (302) 11 12 14 16 17 18 46 49
MK_SEMICOLON (303) 2 11 12 14 16 17 18 37 43 73 74 75 76 82
MK_LPAREN (304) 37 76 112 113 114 115
MK_RPAREN (305) 37 76 112 113 114 115
MK_LB (306) 121
MK_RB (307) 121


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 2, on right: 0
$@1 (55)
    on left: 1, on right: 2
program_body (56)
    on left: 3, on right: 2
opt_decl_list (57)
    on left: 4 5, on right: 3 38 39 68
decl_list (58)
    on left: 7 9, on right: 4 7
$@2 (59)
    on left: 6, on right: 7
$@3 (60)
    on left: 8, on right: 9
decl (61)
    on left: 11 12 14 16 17 18, on right: 7 9
$@4 (62)
    on left: 10, on right: 11
$@5 (63)
    on left: 13, on right: 14
$@6 (64)
    on left: 15, on right: 16
int_const (65)
    on left: 19 20, on right: 21 22 58 59 81
int_literal_const (66)
    on left: 21 22, on right: 17 116
d_literal_const (67)
    on left: 23 24 25 26, on right: 18 117
str_literal_const (68)
    on left: 27, on right: 14 118
bool_literal_const (69)
    on left: 28 29, on right: 16
opt_func_decl_list (70)
    on left: 30 31, on right: 3
func_decl_list (71)
    on left: 32 33, on right: 30 32
func_decl (72)
    on left: 37, on right: 32 33
$@7 (73)
    on left: 34, on right: 37
$@8 (74)
    on left: 35, on right: 37
$@9 (75)
    on left: 36, on right: 37
function_body (76)
    on left: 38 39, on right: 37
opt_param_list (77)
    on left: 40 41, on right: 37
param_list (78)
    on left: 43 45, on right: 40 43
$@10 (79)
    on left: 42, on right: 43
$@11 (80)
    on left: 44, on right: 45
param (81)
    on left: 46, on right: 43 45
id_list (82)
    on left: 47 48, on right: 11 12 14 16 17 18 46 47
opt_type (83)
    on left: 49 50, on right: 37
type (84)
    on left: 51 52, on right: 46 49
scalar_type (85)
    on left: 53 54 55 56, on right: 11 51 58
sort_array_type (86)
    on left: 57, on right: 12 52
array_type (87)
    on left: 58 59, on right: 57 59
stmt (88)
    on left: 60 61 62 63 64 65 66, on right: 71 72
compound_stmt (89)
    on left: 68, on right: 3 38 60
$@12 (90)
    on left: 67, on right: 68
opt_stmt_list (91)
    on left: 69 70, on right: 38 39 68 77 78 79 81
stmt_list (92)
    on left: 71 72, on right: 69 71
simple_stmt (93)
    on left: 73 74 75, on right: 61
proc_call_stmt (94)
    on left: 76, on right: 66
cond_stmt (95)
    on left: 77 78, on right: 62
while_stmt (96)
    on left: 79, on right: 63
for_stmt (97)
    on left: 81, on right: 64
$@13 (98)
    on left: 80, on right: 81
return_stmt (99)
    on left: 82, on right: 65
opt_boolean_expr_list (100)
    on left: 83 84, on right: 76 114 115
boolean_expr_list (101)
    on left: 85 86, on right: 83 85
boolean_expr (102)
    on left: 87 88, on right: 73 74 75 77 78 79 82 85 86 87 112 113
    121
boolean_term (103)
    on left: 89 90, on right: 87 88 89
boolean_factor (104)
    on left: 91 92, on right: 89 90 91
relop_expr (105)
    on left: 93 94, on right: 92
rel_op (106)
    on left: 95 96 97 98 99 100, on right: 93
expr (107)
    on left: 101 102, on right: 93 94 101
add_op (108)
    on left: 103 104, on right: 101
term (109)
    on left: 105 106, on right: 101 102 105
mul_op (110)
    on left: 107 108 109, on right: 105
factor (111)
    on left: 110 111 112 113 114 115 116 117 118, on right: 105 106
var_ref (112)
    on left: 119 120, on right: 73 110 111 120
dim (113)
    on left: 121, on right: 120


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program  go to state 2


State 1

    2 program: ID . $@1 MK_SEMICOLON program_body END ID

    $default  reduce using rule 1 ($@1)

    $@1  go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    2 program: ID $@1 . MK_SEMICOLON program_body END ID

    MK_SEMICOLON  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    2 program: ID $@1 MK_SEMICOLON . program_body END ID

    VAR       reduce using rule 8 ($@3)
    $default  reduce using rule 5 (opt_decl_list)

    program_body   go to state 6
    opt_decl_list  go to state 7
    decl_list      go to state 8
    $@3            go to state 9


State 6

    2 program: ID $@1 MK_SEMICOLON program_body . END ID

    END  shift, and go to state 10


State 7

    3 program_body: opt_decl_list . opt_func_decl_list compound_stmt

    ID  shift, and go to state 11

    $default  reduce using rule 31 (opt_func_decl_list)

    opt_func_decl_list  go to state 12
    func_decl_list      go to state 13
    func_decl           go to state 14


State 8

    4 opt_decl_list: decl_list .
    7 decl_list: decl_list . $@2 decl

    VAR       reduce using rule 6 ($@2)
    $default  reduce using rule 4 (opt_decl_list)

    $@2  go to state 15


State 9

    9 decl_list: $@3 . decl

    VAR  shift, and go to state 16

    decl  go to state 17


State 10

    2 program: ID $@1 MK_SEMICOLON program_body END . ID

    ID  shift, and go to state 18


State 11

   37 func_decl: ID . $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON $@8 BEG function_body END $@9 END ID

    $default  reduce using rule 34 ($@7)

    $@7  go to state 19


State 12

    3 program_body: opt_decl_list opt_func_decl_list . compound_stmt

    BEG  shift, and go to state 20

    compound_stmt  go to state 21


State 13

   30 opt_func_decl_list: func_decl_list .
   32 func_decl_list: func_decl_list . func_decl

    ID  shift, and go to state 11

    $default  reduce using rule 30 (opt_func_decl_list)

    func_decl  go to state 22


State 14

   33 func_decl_list: func_decl .

    $default  reduce using rule 33 (func_decl_list)


State 15

    7 decl_list: decl_list $@2 . decl

    VAR  shift, and go to state 16

    decl  go to state 23


State 16

   11 decl: VAR . id_list MK_COLON scalar_type $@4 MK_SEMICOLON
   12     | VAR . id_list MK_COLON sort_array_type MK_SEMICOLON
   14     | VAR . id_list MK_COLON str_literal_const $@5 MK_SEMICOLON
   16     | VAR . id_list MK_COLON bool_literal_const $@6 MK_SEMICOLON
   17     | VAR . id_list MK_COLON int_literal_const MK_SEMICOLON
   18     | VAR . id_list MK_COLON d_literal_const MK_SEMICOLON

    ID  shift, and go to state 24

    id_list  go to state 25


State 17

    9 decl_list: $@3 decl .

    $default  reduce using rule 9 (decl_list)


State 18

    2 program: ID $@1 MK_SEMICOLON program_body END ID .

    $default  reduce using rule 2 (program)


State 19

   37 func_decl: ID $@7 . MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON $@8 BEG function_body END $@9 END ID

    MK_LPAREN  shift, and go to state 26


State 20

   68 compound_stmt: BEG . $@12 opt_decl_list opt_stmt_list END

    $default  reduce using rule 67 ($@12)

    $@12  go to state 27


State 21

    3 program_body: opt_decl_list opt_func_decl_list compound_stmt .

    $default  reduce using rule 3 (program_body)


State 22

   32 func_decl_list: func_decl_list func_decl .

    $default  reduce using rule 32 (func_decl_list)


State 23

    7 decl_list: decl_list $@2 decl .

    $default  reduce using rule 7 (decl_list)


State 24

   48 id_list: ID .

    $default  reduce using rule 48 (id_list)


State 25

   11 decl: VAR id_list . MK_COLON scalar_type $@4 MK_SEMICOLON
   12     | VAR id_list . MK_COLON sort_array_type MK_SEMICOLON
   14     | VAR id_list . MK_COLON str_literal_const $@5 MK_SEMICOLON
   16     | VAR id_list . MK_COLON bool_literal_const $@6 MK_SEMICOLON
   17     | VAR id_list . MK_COLON int_literal_const MK_SEMICOLON
   18     | VAR id_list . MK_COLON d_literal_const MK_SEMICOLON
   47 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 28
    MK_COLON  shift, and go to state 29


State 26

   37 func_decl: ID $@7 MK_LPAREN . opt_param_list MK_RPAREN opt_type MK_SEMICOLON $@8 BEG function_body END $@9 END ID

    ID        reduce using rule 44 ($@11)
    $default  reduce using rule 41 (opt_param_list)

    opt_param_list  go to state 30
    param_list      go to state 31
    $@11            go to state 32


State 27

   68 compound_stmt: BEG $@12 . opt_decl_list opt_stmt_list END

    VAR       reduce using rule 8 ($@3)
    $default  reduce using rule 5 (opt_decl_list)

    opt_decl_list  go to state 33
    decl_list      go to state 8
    $@3            go to state 9


State 28

   47 id_list: id_list MK_COMMA . ID

    ID  shift, and go to state 34


State 29

   11 decl: VAR id_list MK_COLON . scalar_type $@4 MK_SEMICOLON
   12     | VAR id_list MK_COLON . sort_array_type MK_SEMICOLON
   14     | VAR id_list MK_COLON . str_literal_const $@5 MK_SEMICOLON
   16     | VAR id_list MK_COLON . bool_literal_const $@6 MK_SEMICOLON
   17     | VAR id_list MK_COLON . int_literal_const MK_SEMICOLON
   18     | VAR id_list MK_COLON . d_literal_const MK_SEMICOLON

    ARRAY        shift, and go to state 35
    BOOLEAN      shift, and go to state 36
    FALSE        shift, and go to state 37
    INTEGER      shift, and go to state 38
    REAL         shift, and go to state 39
    STRING       shift, and go to state 40
    TRUE         shift, and go to state 41
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 47

    int_const           go to state 48
    int_literal_const   go to state 49
    d_literal_const     go to state 50
    str_literal_const   go to state 51
    bool_literal_const  go to state 52
    scalar_type         go to state 53
    sort_array_type     go to state 54
    array_type          go to state 55


State 30

   37 func_decl: ID $@7 MK_LPAREN opt_param_list . MK_RPAREN opt_type MK_SEMICOLON $@8 BEG function_body END $@9 END ID

    MK_RPAREN  shift, and go to state 56


State 31

   40 opt_param_list: param_list .
   43 param_list: param_list . MK_SEMICOLON $@10 param

    MK_SEMICOLON  shift, and go to state 57

    $default  reduce using rule 40 (opt_param_list)


State 32

   45 param_list: $@11 . param

    ID  shift, and go to state 24

    param    go to state 58
    id_list  go to state 59


State 33

   68 compound_stmt: BEG $@12 opt_decl_list . opt_stmt_list END

    BEG     shift, and go to state 20
    FOR     shift, and go to state 60
    IF      shift, and go to state 61
    PRINT   shift, and go to state 62
    READ    shift, and go to state 63
    RETURN  shift, and go to state 64
    WHILE   shift, and go to state 65
    ID      shift, and go to state 66

    $default  reduce using rule 70 (opt_stmt_list)

    stmt            go to state 67
    compound_stmt   go to state 68
    opt_stmt_list   go to state 69
    stmt_list       go to state 70
    simple_stmt     go to state 71
    proc_call_stmt  go to state 72
    cond_stmt       go to state 73
    while_stmt      go to state 74
    for_stmt        go to state 75
    return_stmt     go to state 76
    var_ref         go to state 77


State 34

   47 id_list: id_list MK_COMMA ID .

    $default  reduce using rule 47 (id_list)


State 35

   58 array_type: ARRAY . int_const TO int_const OF scalar_type
   59           | ARRAY . int_const TO int_const OF array_type

    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43

    int_const  go to state 78


State 36

   55 scalar_type: BOOLEAN .

    $default  reduce using rule 55 (scalar_type)


State 37

   29 bool_literal_const: FALSE .

    $default  reduce using rule 29 (bool_literal_const)


State 38

   53 scalar_type: INTEGER .

    $default  reduce using rule 53 (scalar_type)


State 39

   54 scalar_type: REAL .

    $default  reduce using rule 54 (scalar_type)


State 40

   56 scalar_type: STRING .

    $default  reduce using rule 56 (scalar_type)


State 41

   28 bool_literal_const: TRUE .

    $default  reduce using rule 28 (bool_literal_const)


State 42

   20 int_const: OCTAL_CONST .

    $default  reduce using rule 20 (int_const)


State 43

   19 int_const: INT_CONST .

    $default  reduce using rule 19 (int_const)


State 44

   23 d_literal_const: FLOAT_CONST .

    $default  reduce using rule 23 (d_literal_const)


State 45

   25 d_literal_const: SCIENTIFIC .

    $default  reduce using rule 25 (d_literal_const)


State 46

   27 str_literal_const: STR_CONST .

    $default  reduce using rule 27 (str_literal_const)


State 47

   22 int_literal_const: OP_SUB . int_const
   24 d_literal_const: OP_SUB . FLOAT_CONST
   26                | OP_SUB . SCIENTIFIC

    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 79
    SCIENTIFIC   shift, and go to state 80

    int_const  go to state 81


State 48

   21 int_literal_const: int_const .

    $default  reduce using rule 21 (int_literal_const)


State 49

   17 decl: VAR id_list MK_COLON int_literal_const . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 82


State 50

   18 decl: VAR id_list MK_COLON d_literal_const . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 83


State 51

   14 decl: VAR id_list MK_COLON str_literal_const . $@5 MK_SEMICOLON

    $default  reduce using rule 13 ($@5)

    $@5  go to state 84


State 52

   16 decl: VAR id_list MK_COLON bool_literal_const . $@6 MK_SEMICOLON

    $default  reduce using rule 15 ($@6)

    $@6  go to state 85


State 53

   11 decl: VAR id_list MK_COLON scalar_type . $@4 MK_SEMICOLON

    $default  reduce using rule 10 ($@4)

    $@4  go to state 86


State 54

   12 decl: VAR id_list MK_COLON sort_array_type . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 87


State 55

   57 sort_array_type: array_type .

    $default  reduce using rule 57 (sort_array_type)


State 56

   37 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN . opt_type MK_SEMICOLON $@8 BEG function_body END $@9 END ID

    MK_COLON  shift, and go to state 88

    $default  reduce using rule 50 (opt_type)

    opt_type  go to state 89


State 57

   43 param_list: param_list MK_SEMICOLON . $@10 param

    $default  reduce using rule 42 ($@10)

    $@10  go to state 90


State 58

   45 param_list: $@11 param .

    $default  reduce using rule 45 (param_list)


State 59

   46 param: id_list . MK_COLON type
   47 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 28
    MK_COLON  shift, and go to state 91


State 60

   81 for_stmt: FOR . ID $@13 OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

    ID  shift, and go to state 92


State 61

   77 cond_stmt: IF . boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF
   78          | IF . boolean_expr THEN opt_stmt_list END IF

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    boolean_expr       go to state 100
    boolean_term       go to state 101
    boolean_factor     go to state 102
    relop_expr         go to state 103
    expr               go to state 104
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 62

   74 simple_stmt: PRINT . boolean_expr MK_SEMICOLON

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    boolean_expr       go to state 108
    boolean_term       go to state 101
    boolean_factor     go to state 102
    relop_expr         go to state 103
    expr               go to state 104
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 63

   75 simple_stmt: READ . boolean_expr MK_SEMICOLON

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    boolean_expr       go to state 109
    boolean_term       go to state 101
    boolean_factor     go to state 102
    relop_expr         go to state 103
    expr               go to state 104
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 64

   82 return_stmt: RETURN . boolean_expr MK_SEMICOLON

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    boolean_expr       go to state 110
    boolean_term       go to state 101
    boolean_factor     go to state 102
    relop_expr         go to state 103
    expr               go to state 104
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 65

   79 while_stmt: WHILE . boolean_expr DO opt_stmt_list END DO

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    boolean_expr       go to state 111
    boolean_term       go to state 101
    boolean_factor     go to state 102
    relop_expr         go to state 103
    expr               go to state 104
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 66

   76 proc_call_stmt: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON
  119 var_ref: ID .

    MK_LPAREN  shift, and go to state 112

    $default  reduce using rule 119 (var_ref)


State 67

   72 stmt_list: stmt .

    $default  reduce using rule 72 (stmt_list)


State 68

   60 stmt: compound_stmt .

    $default  reduce using rule 60 (stmt)


State 69

   68 compound_stmt: BEG $@12 opt_decl_list opt_stmt_list . END

    END  shift, and go to state 113


State 70

   69 opt_stmt_list: stmt_list .
   71 stmt_list: stmt_list . stmt

    BEG     shift, and go to state 20
    FOR     shift, and go to state 60
    IF      shift, and go to state 61
    PRINT   shift, and go to state 62
    READ    shift, and go to state 63
    RETURN  shift, and go to state 64
    WHILE   shift, and go to state 65
    ID      shift, and go to state 66

    BEG       [reduce using rule 69 (opt_stmt_list)]
    $default  reduce using rule 69 (opt_stmt_list)

    stmt            go to state 114
    compound_stmt   go to state 68
    simple_stmt     go to state 71
    proc_call_stmt  go to state 72
    cond_stmt       go to state 73
    while_stmt      go to state 74
    for_stmt        go to state 75
    return_stmt     go to state 76
    var_ref         go to state 77


State 71

   61 stmt: simple_stmt .

    $default  reduce using rule 61 (stmt)


State 72

   66 stmt: proc_call_stmt .

    $default  reduce using rule 66 (stmt)


State 73

   62 stmt: cond_stmt .

    $default  reduce using rule 62 (stmt)


State 74

   63 stmt: while_stmt .

    $default  reduce using rule 63 (stmt)


State 75

   64 stmt: for_stmt .

    $default  reduce using rule 64 (stmt)


State 76

   65 stmt: return_stmt .

    $default  reduce using rule 65 (stmt)


State 77

   73 simple_stmt: var_ref . OP_ASSIGN boolean_expr MK_SEMICOLON
  120 var_ref: var_ref . dim

    OP_ASSIGN  shift, and go to state 115
    MK_LB      shift, and go to state 116

    dim  go to state 117


State 78

   58 array_type: ARRAY int_const . TO int_const OF scalar_type
   59           | ARRAY int_const . TO int_const OF array_type

    TO  shift, and go to state 118


State 79

   24 d_literal_const: OP_SUB FLOAT_CONST .

    $default  reduce using rule 24 (d_literal_const)


State 80

   26 d_literal_const: OP_SUB SCIENTIFIC .

    $default  reduce using rule 26 (d_literal_const)


State 81

   22 int_literal_const: OP_SUB int_const .

    $default  reduce using rule 22 (int_literal_const)


State 82

   17 decl: VAR id_list MK_COLON int_literal_const MK_SEMICOLON .

    $default  reduce using rule 17 (decl)


State 83

   18 decl: VAR id_list MK_COLON d_literal_const MK_SEMICOLON .

    $default  reduce using rule 18 (decl)


State 84

   14 decl: VAR id_list MK_COLON str_literal_const $@5 . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 119


State 85

   16 decl: VAR id_list MK_COLON bool_literal_const $@6 . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 120


State 86

   11 decl: VAR id_list MK_COLON scalar_type $@4 . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 121


State 87

   12 decl: VAR id_list MK_COLON sort_array_type MK_SEMICOLON .

    $default  reduce using rule 12 (decl)


State 88

   49 opt_type: MK_COLON . type

    ARRAY    shift, and go to state 35
    BOOLEAN  shift, and go to state 36
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39
    STRING   shift, and go to state 40

    type             go to state 122
    scalar_type      go to state 123
    sort_array_type  go to state 124
    array_type       go to state 55


State 89

   37 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type . MK_SEMICOLON $@8 BEG function_body END $@9 END ID

    MK_SEMICOLON  shift, and go to state 125


State 90

   43 param_list: param_list MK_SEMICOLON $@10 . param

    ID  shift, and go to state 24

    param    go to state 126
    id_list  go to state 59


State 91

   46 param: id_list MK_COLON . type

    ARRAY    shift, and go to state 35
    BOOLEAN  shift, and go to state 36
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39
    STRING   shift, and go to state 40

    type             go to state 127
    scalar_type      go to state 123
    sort_array_type  go to state 124
    array_type       go to state 55


State 92

   81 for_stmt: FOR ID . $@13 OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

    $default  reduce using rule 80 ($@13)

    $@13  go to state 128


State 93

  114 factor: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
  119 var_ref: ID .

    MK_LPAREN  shift, and go to state 129

    $default  reduce using rule 119 (var_ref)


State 94

   22 int_literal_const: OP_SUB . int_const
   24 d_literal_const: OP_SUB . FLOAT_CONST
   26                | OP_SUB . SCIENTIFIC
  111 factor: OP_SUB . var_ref
  113       | OP_SUB . MK_LPAREN boolean_expr MK_RPAREN
  115       | OP_SUB . ID MK_LPAREN opt_boolean_expr_list MK_RPAREN

    ID           shift, and go to state 130
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 79
    SCIENTIFIC   shift, and go to state 80
    MK_LPAREN    shift, and go to state 131

    int_const  go to state 81
    var_ref    go to state 132


State 95

   91 boolean_factor: OP_NOT . boolean_factor

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    boolean_factor     go to state 133
    relop_expr         go to state 103
    expr               go to state 104
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 96

  112 factor: MK_LPAREN . boolean_expr MK_RPAREN

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    boolean_expr       go to state 134
    boolean_term       go to state 101
    boolean_factor     go to state 102
    relop_expr         go to state 103
    expr               go to state 104
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 97

  116 factor: int_literal_const .

    $default  reduce using rule 116 (factor)


State 98

  117 factor: d_literal_const .

    $default  reduce using rule 117 (factor)


State 99

  118 factor: str_literal_const .

    $default  reduce using rule 118 (factor)


State 100

   77 cond_stmt: IF boolean_expr . THEN opt_stmt_list ELSE opt_stmt_list END IF
   78          | IF boolean_expr . THEN opt_stmt_list END IF
   87 boolean_expr: boolean_expr . OP_OR boolean_term

    THEN   shift, and go to state 135
    OP_OR  shift, and go to state 136


State 101

   88 boolean_expr: boolean_term .
   89 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 137

    $default  reduce using rule 88 (boolean_expr)


State 102

   90 boolean_term: boolean_factor .

    $default  reduce using rule 90 (boolean_term)


State 103

   92 boolean_factor: relop_expr .

    $default  reduce using rule 92 (boolean_factor)


State 104

   93 relop_expr: expr . rel_op expr
   94           | expr .
  101 expr: expr . add_op term

    OP_ADD  shift, and go to state 138
    OP_SUB  shift, and go to state 139
    OP_EQ   shift, and go to state 140
    OP_NE   shift, and go to state 141
    OP_GT   shift, and go to state 142
    OP_LT   shift, and go to state 143
    OP_GE   shift, and go to state 144
    OP_LE   shift, and go to state 145

    $default  reduce using rule 94 (relop_expr)

    rel_op  go to state 146
    add_op  go to state 147


State 105

  102 expr: term .
  105 term: term . mul_op factor

    OP_MUL  shift, and go to state 148
    OP_DIV  shift, and go to state 149
    OP_MOD  shift, and go to state 150

    $default  reduce using rule 102 (expr)

    mul_op  go to state 151


State 106

  106 term: factor .

    $default  reduce using rule 106 (term)


State 107

  110 factor: var_ref .
  120 var_ref: var_ref . dim

    MK_LB  shift, and go to state 116

    $default  reduce using rule 110 (factor)

    dim  go to state 117


State 108

   74 simple_stmt: PRINT boolean_expr . MK_SEMICOLON
   87 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 136
    MK_SEMICOLON  shift, and go to state 152


State 109

   75 simple_stmt: READ boolean_expr . MK_SEMICOLON
   87 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 136
    MK_SEMICOLON  shift, and go to state 153


State 110

   82 return_stmt: RETURN boolean_expr . MK_SEMICOLON
   87 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 136
    MK_SEMICOLON  shift, and go to state 154


State 111

   79 while_stmt: WHILE boolean_expr . DO opt_stmt_list END DO
   87 boolean_expr: boolean_expr . OP_OR boolean_term

    DO     shift, and go to state 155
    OP_OR  shift, and go to state 136


State 112

   76 proc_call_stmt: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    $default  reduce using rule 84 (opt_boolean_expr_list)

    int_const              go to state 48
    int_literal_const      go to state 97
    d_literal_const        go to state 98
    str_literal_const      go to state 99
    opt_boolean_expr_list  go to state 156
    boolean_expr_list      go to state 157
    boolean_expr           go to state 158
    boolean_term           go to state 101
    boolean_factor         go to state 102
    relop_expr             go to state 103
    expr                   go to state 104
    term                   go to state 105
    factor                 go to state 106
    var_ref                go to state 107


State 113

   68 compound_stmt: BEG $@12 opt_decl_list opt_stmt_list END .

    $default  reduce using rule 68 (compound_stmt)


State 114

   71 stmt_list: stmt_list stmt .

    $default  reduce using rule 71 (stmt_list)


State 115

   73 simple_stmt: var_ref OP_ASSIGN . boolean_expr MK_SEMICOLON

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    boolean_expr       go to state 159
    boolean_term       go to state 101
    boolean_factor     go to state 102
    relop_expr         go to state 103
    expr               go to state 104
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 116

  121 dim: MK_LB . boolean_expr MK_RB

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    boolean_expr       go to state 160
    boolean_term       go to state 101
    boolean_factor     go to state 102
    relop_expr         go to state 103
    expr               go to state 104
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 117

  120 var_ref: var_ref dim .

    $default  reduce using rule 120 (var_ref)


State 118

   58 array_type: ARRAY int_const TO . int_const OF scalar_type
   59           | ARRAY int_const TO . int_const OF array_type

    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43

    int_const  go to state 161


State 119

   14 decl: VAR id_list MK_COLON str_literal_const $@5 MK_SEMICOLON .

    $default  reduce using rule 14 (decl)


State 120

   16 decl: VAR id_list MK_COLON bool_literal_const $@6 MK_SEMICOLON .

    $default  reduce using rule 16 (decl)


State 121

   11 decl: VAR id_list MK_COLON scalar_type $@4 MK_SEMICOLON .

    $default  reduce using rule 11 (decl)


State 122

   49 opt_type: MK_COLON type .

    $default  reduce using rule 49 (opt_type)


State 123

   51 type: scalar_type .

    $default  reduce using rule 51 (type)


State 124

   52 type: sort_array_type .

    $default  reduce using rule 52 (type)


State 125

   37 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON . $@8 BEG function_body END $@9 END ID

    $default  reduce using rule 35 ($@8)

    $@8  go to state 162


State 126

   43 param_list: param_list MK_SEMICOLON $@10 param .

    $default  reduce using rule 43 (param_list)


State 127

   46 param: id_list MK_COLON type .

    $default  reduce using rule 46 (param)


State 128

   81 for_stmt: FOR ID $@13 . OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

    OP_ASSIGN  shift, and go to state 163


State 129

  114 factor: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    $default  reduce using rule 84 (opt_boolean_expr_list)

    int_const              go to state 48
    int_literal_const      go to state 97
    d_literal_const        go to state 98
    str_literal_const      go to state 99
    opt_boolean_expr_list  go to state 164
    boolean_expr_list      go to state 157
    boolean_expr           go to state 158
    boolean_term           go to state 101
    boolean_factor         go to state 102
    relop_expr             go to state 103
    expr                   go to state 104
    term                   go to state 105
    factor                 go to state 106
    var_ref                go to state 107


State 130

  115 factor: OP_SUB ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
  119 var_ref: ID .

    MK_LPAREN  shift, and go to state 165

    $default  reduce using rule 119 (var_ref)


State 131

  113 factor: OP_SUB MK_LPAREN . boolean_expr MK_RPAREN

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    boolean_expr       go to state 166
    boolean_term       go to state 101
    boolean_factor     go to state 102
    relop_expr         go to state 103
    expr               go to state 104
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 132

  111 factor: OP_SUB var_ref .
  120 var_ref: var_ref . dim

    MK_LB  shift, and go to state 116

    $default  reduce using rule 111 (factor)

    dim  go to state 117


State 133

   91 boolean_factor: OP_NOT boolean_factor .

    $default  reduce using rule 91 (boolean_factor)


State 134

   87 boolean_expr: boolean_expr . OP_OR boolean_term
  112 factor: MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 136
    MK_RPAREN  shift, and go to state 167


State 135

   77 cond_stmt: IF boolean_expr THEN . opt_stmt_list ELSE opt_stmt_list END IF
   78          | IF boolean_expr THEN . opt_stmt_list END IF

    BEG     shift, and go to state 20
    FOR     shift, and go to state 60
    IF      shift, and go to state 61
    PRINT   shift, and go to state 62
    READ    shift, and go to state 63
    RETURN  shift, and go to state 64
    WHILE   shift, and go to state 65
    ID      shift, and go to state 66

    $default  reduce using rule 70 (opt_stmt_list)

    stmt            go to state 67
    compound_stmt   go to state 68
    opt_stmt_list   go to state 168
    stmt_list       go to state 70
    simple_stmt     go to state 71
    proc_call_stmt  go to state 72
    cond_stmt       go to state 73
    while_stmt      go to state 74
    for_stmt        go to state 75
    return_stmt     go to state 76
    var_ref         go to state 77


State 136

   87 boolean_expr: boolean_expr OP_OR . boolean_term

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    boolean_term       go to state 169
    boolean_factor     go to state 102
    relop_expr         go to state 103
    expr               go to state 104
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 137

   89 boolean_term: boolean_term OP_AND . boolean_factor

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    boolean_factor     go to state 170
    relop_expr         go to state 103
    expr               go to state 104
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 138

  103 add_op: OP_ADD .

    $default  reduce using rule 103 (add_op)


State 139

  104 add_op: OP_SUB .

    $default  reduce using rule 104 (add_op)


State 140

   97 rel_op: OP_EQ .

    $default  reduce using rule 97 (rel_op)


State 141

  100 rel_op: OP_NE .

    $default  reduce using rule 100 (rel_op)


State 142

   99 rel_op: OP_GT .

    $default  reduce using rule 99 (rel_op)


State 143

   95 rel_op: OP_LT .

    $default  reduce using rule 95 (rel_op)


State 144

   98 rel_op: OP_GE .

    $default  reduce using rule 98 (rel_op)


State 145

   96 rel_op: OP_LE .

    $default  reduce using rule 96 (rel_op)


State 146

   93 relop_expr: expr rel_op . expr

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    expr               go to state 171
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 147

  101 expr: expr add_op . term

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    term               go to state 172
    factor             go to state 106
    var_ref            go to state 107


State 148

  107 mul_op: OP_MUL .

    $default  reduce using rule 107 (mul_op)


State 149

  108 mul_op: OP_DIV .

    $default  reduce using rule 108 (mul_op)


State 150

  109 mul_op: OP_MOD .

    $default  reduce using rule 109 (mul_op)


State 151

  105 term: term mul_op . factor

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    factor             go to state 173
    var_ref            go to state 107


State 152

   74 simple_stmt: PRINT boolean_expr MK_SEMICOLON .

    $default  reduce using rule 74 (simple_stmt)


State 153

   75 simple_stmt: READ boolean_expr MK_SEMICOLON .

    $default  reduce using rule 75 (simple_stmt)


State 154

   82 return_stmt: RETURN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 82 (return_stmt)


State 155

   79 while_stmt: WHILE boolean_expr DO . opt_stmt_list END DO

    BEG     shift, and go to state 20
    FOR     shift, and go to state 60
    IF      shift, and go to state 61
    PRINT   shift, and go to state 62
    READ    shift, and go to state 63
    RETURN  shift, and go to state 64
    WHILE   shift, and go to state 65
    ID      shift, and go to state 66

    $default  reduce using rule 70 (opt_stmt_list)

    stmt            go to state 67
    compound_stmt   go to state 68
    opt_stmt_list   go to state 174
    stmt_list       go to state 70
    simple_stmt     go to state 71
    proc_call_stmt  go to state 72
    cond_stmt       go to state 73
    while_stmt      go to state 74
    for_stmt        go to state 75
    return_stmt     go to state 76
    var_ref         go to state 77


State 156

   76 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN MK_SEMICOLON

    MK_RPAREN  shift, and go to state 175


State 157

   83 opt_boolean_expr_list: boolean_expr_list .
   85 boolean_expr_list: boolean_expr_list . MK_COMMA boolean_expr

    MK_COMMA  shift, and go to state 176

    $default  reduce using rule 83 (opt_boolean_expr_list)


State 158

   86 boolean_expr_list: boolean_expr .
   87 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 136

    $default  reduce using rule 86 (boolean_expr_list)


State 159

   73 simple_stmt: var_ref OP_ASSIGN boolean_expr . MK_SEMICOLON
   87 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 136
    MK_SEMICOLON  shift, and go to state 177


State 160

   87 boolean_expr: boolean_expr . OP_OR boolean_term
  121 dim: MK_LB boolean_expr . MK_RB

    OP_OR  shift, and go to state 136
    MK_RB  shift, and go to state 178


State 161

   58 array_type: ARRAY int_const TO int_const . OF scalar_type
   59           | ARRAY int_const TO int_const . OF array_type

    OF  shift, and go to state 179


State 162

   37 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON $@8 . BEG function_body END $@9 END ID

    BEG  shift, and go to state 180


State 163

   81 for_stmt: FOR ID $@13 OP_ASSIGN . int_const TO int_const DO opt_stmt_list END DO

    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43

    int_const  go to state 181


State 164

  114 factor: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 182


State 165

  115 factor: OP_SUB ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    $default  reduce using rule 84 (opt_boolean_expr_list)

    int_const              go to state 48
    int_literal_const      go to state 97
    d_literal_const        go to state 98
    str_literal_const      go to state 99
    opt_boolean_expr_list  go to state 183
    boolean_expr_list      go to state 157
    boolean_expr           go to state 158
    boolean_term           go to state 101
    boolean_factor         go to state 102
    relop_expr             go to state 103
    expr                   go to state 104
    term                   go to state 105
    factor                 go to state 106
    var_ref                go to state 107


State 166

   87 boolean_expr: boolean_expr . OP_OR boolean_term
  113 factor: OP_SUB MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 136
    MK_RPAREN  shift, and go to state 184


State 167

  112 factor: MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 112 (factor)


State 168

   77 cond_stmt: IF boolean_expr THEN opt_stmt_list . ELSE opt_stmt_list END IF
   78          | IF boolean_expr THEN opt_stmt_list . END IF

    ELSE  shift, and go to state 185
    END   shift, and go to state 186


State 169

   87 boolean_expr: boolean_expr OP_OR boolean_term .
   89 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 137

    $default  reduce using rule 87 (boolean_expr)


State 170

   89 boolean_term: boolean_term OP_AND boolean_factor .

    $default  reduce using rule 89 (boolean_term)


State 171

   93 relop_expr: expr rel_op expr .
  101 expr: expr . add_op term

    OP_ADD  shift, and go to state 138
    OP_SUB  shift, and go to state 139

    $default  reduce using rule 93 (relop_expr)

    add_op  go to state 147


State 172

  101 expr: expr add_op term .
  105 term: term . mul_op factor

    OP_MUL  shift, and go to state 148
    OP_DIV  shift, and go to state 149
    OP_MOD  shift, and go to state 150

    $default  reduce using rule 101 (expr)

    mul_op  go to state 151


State 173

  105 term: term mul_op factor .

    $default  reduce using rule 105 (term)


State 174

   79 while_stmt: WHILE boolean_expr DO opt_stmt_list . END DO

    END  shift, and go to state 187


State 175

   76 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 188


State 176

   85 boolean_expr_list: boolean_expr_list MK_COMMA . boolean_expr

    ID           shift, and go to state 93
    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43
    FLOAT_CONST  shift, and go to state 44
    SCIENTIFIC   shift, and go to state 45
    STR_CONST    shift, and go to state 46
    OP_SUB       shift, and go to state 94
    OP_NOT       shift, and go to state 95
    MK_LPAREN    shift, and go to state 96

    int_const          go to state 48
    int_literal_const  go to state 97
    d_literal_const    go to state 98
    str_literal_const  go to state 99
    boolean_expr       go to state 189
    boolean_term       go to state 101
    boolean_factor     go to state 102
    relop_expr         go to state 103
    expr               go to state 104
    term               go to state 105
    factor             go to state 106
    var_ref            go to state 107


State 177

   73 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 73 (simple_stmt)


State 178

  121 dim: MK_LB boolean_expr MK_RB .

    $default  reduce using rule 121 (dim)


State 179

   58 array_type: ARRAY int_const TO int_const OF . scalar_type
   59           | ARRAY int_const TO int_const OF . array_type

    ARRAY    shift, and go to state 35
    BOOLEAN  shift, and go to state 36
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39
    STRING   shift, and go to state 40

    scalar_type  go to state 190
    array_type   go to state 191


State 180

   37 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON $@8 BEG . function_body END $@9 END ID

    VAR       reduce using rule 8 ($@3)
    $default  reduce using rule 5 (opt_decl_list)

    opt_decl_list  go to state 192
    decl_list      go to state 8
    $@3            go to state 9
    function_body  go to state 193


State 181

   81 for_stmt: FOR ID $@13 OP_ASSIGN int_const . TO int_const DO opt_stmt_list END DO

    TO  shift, and go to state 194


State 182

  114 factor: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 114 (factor)


State 183

  115 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 195


State 184

  113 factor: OP_SUB MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 113 (factor)


State 185

   77 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE . opt_stmt_list END IF

    BEG     shift, and go to state 20
    FOR     shift, and go to state 60
    IF      shift, and go to state 61
    PRINT   shift, and go to state 62
    READ    shift, and go to state 63
    RETURN  shift, and go to state 64
    WHILE   shift, and go to state 65
    ID      shift, and go to state 66

    $default  reduce using rule 70 (opt_stmt_list)

    stmt            go to state 67
    compound_stmt   go to state 68
    opt_stmt_list   go to state 196
    stmt_list       go to state 70
    simple_stmt     go to state 71
    proc_call_stmt  go to state 72
    cond_stmt       go to state 73
    while_stmt      go to state 74
    for_stmt        go to state 75
    return_stmt     go to state 76
    var_ref         go to state 77


State 186

   78 cond_stmt: IF boolean_expr THEN opt_stmt_list END . IF

    IF  shift, and go to state 197


State 187

   79 while_stmt: WHILE boolean_expr DO opt_stmt_list END . DO

    DO  shift, and go to state 198


State 188

   76 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 76 (proc_call_stmt)


State 189

   85 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr .
   87 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 136

    $default  reduce using rule 85 (boolean_expr_list)


State 190

   58 array_type: ARRAY int_const TO int_const OF scalar_type .

    $default  reduce using rule 58 (array_type)


State 191

   59 array_type: ARRAY int_const TO int_const OF array_type .

    $default  reduce using rule 59 (array_type)


State 192

   38 function_body: opt_decl_list . opt_stmt_list compound_stmt
   39              | opt_decl_list . opt_stmt_list

    BEG     shift, and go to state 20
    FOR     shift, and go to state 60
    IF      shift, and go to state 61
    PRINT   shift, and go to state 62
    READ    shift, and go to state 63
    RETURN  shift, and go to state 64
    WHILE   shift, and go to state 65
    ID      shift, and go to state 66

    BEG       [reduce using rule 70 (opt_stmt_list)]
    $default  reduce using rule 70 (opt_stmt_list)

    stmt            go to state 67
    compound_stmt   go to state 68
    opt_stmt_list   go to state 199
    stmt_list       go to state 70
    simple_stmt     go to state 71
    proc_call_stmt  go to state 72
    cond_stmt       go to state 73
    while_stmt      go to state 74
    for_stmt        go to state 75
    return_stmt     go to state 76
    var_ref         go to state 77


State 193

   37 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON $@8 BEG function_body . END $@9 END ID

    END  shift, and go to state 200


State 194

   81 for_stmt: FOR ID $@13 OP_ASSIGN int_const TO . int_const DO opt_stmt_list END DO

    OCTAL_CONST  shift, and go to state 42
    INT_CONST    shift, and go to state 43

    int_const  go to state 201


State 195

  115 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 115 (factor)


State 196

   77 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list . END IF

    END  shift, and go to state 202


State 197

   78 cond_stmt: IF boolean_expr THEN opt_stmt_list END IF .

    $default  reduce using rule 78 (cond_stmt)


State 198

   79 while_stmt: WHILE boolean_expr DO opt_stmt_list END DO .

    $default  reduce using rule 79 (while_stmt)


State 199

   38 function_body: opt_decl_list opt_stmt_list . compound_stmt
   39              | opt_decl_list opt_stmt_list .

    BEG  shift, and go to state 20

    $default  reduce using rule 39 (function_body)

    compound_stmt  go to state 203


State 200

   37 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON $@8 BEG function_body END . $@9 END ID

    $default  reduce using rule 36 ($@9)

    $@9  go to state 204


State 201

   81 for_stmt: FOR ID $@13 OP_ASSIGN int_const TO int_const . DO opt_stmt_list END DO

    DO  shift, and go to state 205


State 202

   77 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END . IF

    IF  shift, and go to state 206


State 203

   38 function_body: opt_decl_list opt_stmt_list compound_stmt .

    $default  reduce using rule 38 (function_body)


State 204

   37 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON $@8 BEG function_body END $@9 . END ID

    END  shift, and go to state 207


State 205

   81 for_stmt: FOR ID $@13 OP_ASSIGN int_const TO int_const DO . opt_stmt_list END DO

    BEG     shift, and go to state 20
    FOR     shift, and go to state 60
    IF      shift, and go to state 61
    PRINT   shift, and go to state 62
    READ    shift, and go to state 63
    RETURN  shift, and go to state 64
    WHILE   shift, and go to state 65
    ID      shift, and go to state 66

    $default  reduce using rule 70 (opt_stmt_list)

    stmt            go to state 67
    compound_stmt   go to state 68
    opt_stmt_list   go to state 208
    stmt_list       go to state 70
    simple_stmt     go to state 71
    proc_call_stmt  go to state 72
    cond_stmt       go to state 73
    while_stmt      go to state 74
    for_stmt        go to state 75
    return_stmt     go to state 76
    var_ref         go to state 77


State 206

   77 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF .

    $default  reduce using rule 77 (cond_stmt)


State 207

   37 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON $@8 BEG function_body END $@9 END . ID

    ID  shift, and go to state 209


State 208

   81 for_stmt: FOR ID $@13 OP_ASSIGN int_const TO int_const DO opt_stmt_list . END DO

    END  shift, and go to state 210


State 209

   37 func_decl: ID $@7 MK_LPAREN opt_param_list MK_RPAREN opt_type MK_SEMICOLON $@8 BEG function_body END $@9 END ID .

    $default  reduce using rule 37 (func_decl)


State 210

   81 for_stmt: FOR ID $@13 OP_ASSIGN int_const TO int_const DO opt_stmt_list END . DO

    DO  shift, and go to state 211


State 211

   81 for_stmt: FOR ID $@13 OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO .

    $default  reduce using rule 81 (for_stmt)
