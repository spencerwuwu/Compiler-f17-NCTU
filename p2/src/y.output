Terminals unused in grammar

   KWDEF


Rules useless in parser due to conflicts

  119 statements: statement


State 6 conflicts: 2 shift/reduce
State 22 conflicts: 9 reduce/reduce
State 51 conflicts: 2 reduce/reduce
State 89 conflicts: 1 shift/reduce
State 92 conflicts: 1 reduce/reduce
State 98 conflicts: 1 reduce/reduce
State 128 conflicts: 1 shift/reduce
State 151 conflicts: 1 shift/reduce
State 174 conflicts: 1 shift/reduce
State 183 conflicts: 1 shift/reduce
State 185 conflicts: 1 reduce/reduce
State 190 conflicts: 1 shift/reduce
State 205 conflicts: 1 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: programname SEMICOLON programbody compound KWEND IDENT

    2 programname: identifier

    3 programbody: %empty
    4            | program_inside
    5            | programbody program_inside

    6 program_inside: variable
    7               | function

    8 identifier: IDENT

    9 function: functionname '(' functionarguments ')' functionbody SEMICOLON
   10         | functionname '(' functionarguments ')' functionbody SEMICOLON compound KWEND IDENT

   11 functionname: IDENT

   12 functionbody: %empty
   13             | ':' type

   14 type: KWARRAY
   15     | KWBOOLEAN
   16     | KWINTEGER
   17     | KWSTRING
   18     | KWREAL
   19     | KWARRAY integer_constant KWTO integer_constant KWOF type

   20 type_num: KWTRUE
   21         | KWFALSE
   22         | INTEGER
   23         | STRING
   24         | FLOAT
   25         | SCIENTIFIC

   26 functionarguments: %empty
   27                  | functionargument
   28                  | functionargument SEMICOLON functionarguments

   29 functionargument: identifier_list ':' type

   30 identifier_list: identifier
   31                | identifier ',' identifier_list

   32 variable: KWVAR identifier_list ':' type SEMICOLON
   33         | KWVAR identifier_list ':' type_num SEMICOLON
   34         | KWVAR identifier_list ':' SEMICOLON

   35 integer_constant: INTEGER

   36 literal_constant: INTEGER
   37                 | KWREAL
   38                 | OCTAL
   39                 | FLOAT
   40                 | SCIENTIFIC
   41                 | STRING
   42                 | KWTRUE
   43                 | KWFALSE

   44 statement: function_invocation SEMICOLON
   45          | compound
   46          | simple
   47          | conditional
   48          | while
   49          | for
   50          | return

   51 compound: KWBEGIN variables statements KWEND

   52 variables: variable variables
   53          | variable
   54          | %empty

   55 simple: variable_reference IDENTEQUAL expression SEMICOLON
   56       | KWPRINT variable_reference SEMICOLON
   57       | KWPRINT expression SEMICOLON
   58       | KWREAD variable_reference SEMICOLON

   59 variable_reference: IDENT
   60                   | array_reference
   61                   | function_invocation

   62 array_reference: IDENT arrays

   63 arrays: array
   64       | array arrays

   65 array: '[' integer_expression ']'

   66 integer_expression: integer_expression operator int_exp
   67                   | int_exp
   68                   | '-' int_exp

   69 int_exp: INTEGER
   70        | IDENT
   71        | function_invocation
   72        | array_exp

   73 array_exp: IDENT int_arr_expressions

   74 int_arr_expressions: '[' integer_expression ']' int_arr_expressions
   75                    | '[' integer_expression ']'

   76 expression: exp
   77           | '(' exp ')'
   78           | '-' exp
   79           | '(' '-' exp ')'
   80           | exp operator expression
   81           | '(' expression ')'

   82 expr_b: exp
   83       | '(' exp ')'
   84       | exp ')'
   85       | '-' exp
   86       | '(' '-' exp ')'
   87       | exp operator_b expr_b
   88       | '(' expr_b ')'

   89 exp: literal_constant
   90    | IDENT
   91    | function_invocation
   92    | array_exp

   93 function_invocation: IDENT '(' expressions ')'

   94 expressions: expression ',' expressions
   95            | expression
   96            | %empty

   97 operator: '-'
   98         | '*'
   99         | '/'
  100         | MOD
  101         | '+'
  102         | '<'
  103         | SE
  104         | '='
  105         | LE
  106         | '>'
  107         | LS
  108         | NOT
  109         | AND
  110         | OR

  111 operator_b: '-'
  112           | '*'
  113           | '/'
  114           | MOD
  115           | '+'

  116 conditional: KWIF boolean_expr KWTHEN statements KWELSE statements KWEND KWIF
  117            | KWIF boolean_expr KWTHEN statements KWEND KWIF

  118 statements: %empty
  119           | statement
  120           | statement statements

  121 boolean_expr: expr_b bool_operator expr_b

  122 bool_operator: '<'
  123              | SE
  124              | '='
  125              | LE
  126              | '>'
  127              | LS
  128              | NOT
  129              | AND
  130              | OR

  131 while: KWWHILE boolean_expr KWDO statements KWEND KWDO

  132 for: KWFOR IDENT IDENTEQUAL integer_constant KWTO integer_constant KWDO statements KWEND KWDO

  133 return: KWRETURN expression SEMICOLON


Terminals, with rules where they appear

$end (0) 0
'(' (40) 9 10 77 79 81 83 86 88 93
')' (41) 9 10 77 79 81 83 84 86 88 93
'*' (42) 98 112
'+' (43) 101 115
',' (44) 31 94
'-' (45) 68 78 79 85 86 97 111
'/' (47) 99 113
':' (58) 13 29 32 33 34
'<' (60) 102 122
'=' (61) 104 124
'>' (62) 106 126
'[' (91) 65 74 75
']' (93) 65 74 75
error (256)
SEMICOLON (258) 1 9 10 28 32 33 34 44 55 56 57 58 133
MOD (259) 100 114
KWBEGIN (260) 51
KWEND (261) 1 10 51 116 117 131 132
IDENT (262) 1 8 10 11 59 62 70 73 90 93 132
KWARRAY (263) 14 19
IDENTEQUAL (264) 55 132
LS (265) 107 127
LE (266) 105 125
SE (267) 103 123
NOT (268) 108 128
AND (269) 109 129
OR (270) 110 130
KWBOOLEAN (271) 15
KWDEF (272)
KWDO (273) 131 132
KWELSE (274) 116
KWFALSE (275) 21 43
KWFOR (276) 132
KWINTEGER (277) 16
KWIF (278) 116 117
KWOF (279) 19
KWPRINT (280) 56 57
KWREAD (281) 58
KWREAL (282) 18 37
KWSTRING (283) 17
KWTHEN (284) 116 117
KWTO (285) 19 132
KWTRUE (286) 20 42
KWRETURN (287) 133
KWVAR (288) 32 33 34
KWWHILE (289) 131
INTEGER (290) 22 35 36 69
OCTAL (291) 38
FLOAT (292) 24 39
SCIENTIFIC (293) 25 40
STRING (294) 23 41


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 1, on right: 0
programname (55)
    on left: 2, on right: 1
programbody (56)
    on left: 3 4 5, on right: 1 5
program_inside (57)
    on left: 6 7, on right: 4 5
identifier (58)
    on left: 8, on right: 2 30 31
function (59)
    on left: 9 10, on right: 7
functionname (60)
    on left: 11, on right: 9 10
functionbody (61)
    on left: 12 13, on right: 9 10
type (62)
    on left: 14 15 16 17 18 19, on right: 13 19 29 32
type_num (63)
    on left: 20 21 22 23 24 25, on right: 33
functionarguments (64)
    on left: 26 27 28, on right: 9 10 28
functionargument (65)
    on left: 29, on right: 27 28
identifier_list (66)
    on left: 30 31, on right: 29 31 32 33 34
variable (67)
    on left: 32 33 34, on right: 6 52 53
integer_constant (68)
    on left: 35, on right: 19 132
literal_constant (69)
    on left: 36 37 38 39 40 41 42 43, on right: 89
statement (70)
    on left: 44 45 46 47 48 49 50, on right: 119 120
compound (71)
    on left: 51, on right: 1 10 45
variables (72)
    on left: 52 53 54, on right: 51 52
simple (73)
    on left: 55 56 57 58, on right: 46
variable_reference (74)
    on left: 59 60 61, on right: 55 56 58
array_reference (75)
    on left: 62, on right: 60
arrays (76)
    on left: 63 64, on right: 62 64
array (77)
    on left: 65, on right: 63 64
integer_expression (78)
    on left: 66 67 68, on right: 65 66 74 75
int_exp (79)
    on left: 69 70 71 72, on right: 66 67 68
array_exp (80)
    on left: 73, on right: 72 92
int_arr_expressions (81)
    on left: 74 75, on right: 73 74
expression (82)
    on left: 76 77 78 79 80 81, on right: 55 57 80 81 94 95 133
expr_b (83)
    on left: 82 83 84 85 86 87 88, on right: 87 88 121
exp (84)
    on left: 89 90 91 92, on right: 76 77 78 79 80 82 83 84 85 86 87
function_invocation (85)
    on left: 93, on right: 44 61 71 91
expressions (86)
    on left: 94 95 96, on right: 93 94
operator (87)
    on left: 97 98 99 100 101 102 103 104 105 106 107 108 109 110,
    on right: 66 80
operator_b (88)
    on left: 111 112 113 114 115, on right: 87
conditional (89)
    on left: 116 117, on right: 47
statements (90)
    on left: 118 119 120, on right: 51 116 117 120 131 132
boolean_expr (91)
    on left: 121, on right: 116 117 131
bool_operator (92)
    on left: 122 123 124 125 126 127 128 129 130, on right: 121
while (93)
    on left: 131, on right: 48
for (94)
    on left: 132, on right: 49
return (95)
    on left: 133, on right: 50


State 0

    0 $accept: . program $end

    IDENT  shift, and go to state 1

    program      go to state 2
    programname  go to state 3
    identifier   go to state 4


State 1

    8 identifier: IDENT .

    $default  reduce using rule 8 (identifier)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    1 program: programname . SEMICOLON programbody compound KWEND IDENT

    SEMICOLON  shift, and go to state 6


State 4

    2 programname: identifier .

    $default  reduce using rule 2 (programname)


State 5

    0 $accept: program $end .

    $default  accept


State 6

    1 program: programname SEMICOLON . programbody compound KWEND IDENT

    IDENT  shift, and go to state 7
    KWVAR  shift, and go to state 8

    IDENT     [reduce using rule 3 (programbody)]
    KWVAR     [reduce using rule 3 (programbody)]
    $default  reduce using rule 3 (programbody)

    programbody     go to state 9
    program_inside  go to state 10
    function        go to state 11
    functionname    go to state 12
    variable        go to state 13


State 7

   11 functionname: IDENT .

    $default  reduce using rule 11 (functionname)


State 8

   32 variable: KWVAR . identifier_list ':' type SEMICOLON
   33         | KWVAR . identifier_list ':' type_num SEMICOLON
   34         | KWVAR . identifier_list ':' SEMICOLON

    IDENT  shift, and go to state 1

    identifier       go to state 14
    identifier_list  go to state 15


State 9

    1 program: programname SEMICOLON programbody . compound KWEND IDENT
    5 programbody: programbody . program_inside

    KWBEGIN  shift, and go to state 16
    IDENT    shift, and go to state 7
    KWVAR    shift, and go to state 8

    program_inside  go to state 17
    function        go to state 11
    functionname    go to state 12
    variable        go to state 13
    compound        go to state 18


State 10

    4 programbody: program_inside .

    $default  reduce using rule 4 (programbody)


State 11

    7 program_inside: function .

    $default  reduce using rule 7 (program_inside)


State 12

    9 function: functionname . '(' functionarguments ')' functionbody SEMICOLON
   10         | functionname . '(' functionarguments ')' functionbody SEMICOLON compound KWEND IDENT

    '('  shift, and go to state 19


State 13

    6 program_inside: variable .

    $default  reduce using rule 6 (program_inside)


State 14

   30 identifier_list: identifier .
   31                | identifier . ',' identifier_list

    ','  shift, and go to state 20

    $default  reduce using rule 30 (identifier_list)


State 15

   32 variable: KWVAR identifier_list . ':' type SEMICOLON
   33         | KWVAR identifier_list . ':' type_num SEMICOLON
   34         | KWVAR identifier_list . ':' SEMICOLON

    ':'  shift, and go to state 21


State 16

   51 compound: KWBEGIN . variables statements KWEND

    KWVAR  shift, and go to state 8

    $default  reduce using rule 54 (variables)

    variable   go to state 22
    variables  go to state 23


State 17

    5 programbody: programbody program_inside .

    $default  reduce using rule 5 (programbody)


State 18

    1 program: programname SEMICOLON programbody compound . KWEND IDENT

    KWEND  shift, and go to state 24


State 19

    9 function: functionname '(' . functionarguments ')' functionbody SEMICOLON
   10         | functionname '(' . functionarguments ')' functionbody SEMICOLON compound KWEND IDENT

    IDENT  shift, and go to state 1

    $default  reduce using rule 26 (functionarguments)

    identifier         go to state 14
    functionarguments  go to state 25
    functionargument   go to state 26
    identifier_list    go to state 27


State 20

   31 identifier_list: identifier ',' . identifier_list

    IDENT  shift, and go to state 1

    identifier       go to state 14
    identifier_list  go to state 28


State 21

   32 variable: KWVAR identifier_list ':' . type SEMICOLON
   33         | KWVAR identifier_list ':' . type_num SEMICOLON
   34         | KWVAR identifier_list ':' . SEMICOLON

    SEMICOLON   shift, and go to state 29
    KWARRAY     shift, and go to state 30
    KWBOOLEAN   shift, and go to state 31
    KWFALSE     shift, and go to state 32
    KWINTEGER   shift, and go to state 33
    KWREAL      shift, and go to state 34
    KWSTRING    shift, and go to state 35
    KWTRUE      shift, and go to state 36
    INTEGER     shift, and go to state 37
    FLOAT       shift, and go to state 38
    SCIENTIFIC  shift, and go to state 39
    STRING      shift, and go to state 40

    type      go to state 41
    type_num  go to state 42


State 22

   52 variables: variable . variables
   53          | variable .

    KWVAR  shift, and go to state 8

    KWBEGIN   reduce using rule 53 (variables)
    KWBEGIN   [reduce using rule 54 (variables)]
    KWEND     reduce using rule 53 (variables)
    KWEND     [reduce using rule 54 (variables)]
    IDENT     reduce using rule 53 (variables)
    IDENT     [reduce using rule 54 (variables)]
    KWFOR     reduce using rule 53 (variables)
    KWFOR     [reduce using rule 54 (variables)]
    KWIF      reduce using rule 53 (variables)
    KWIF      [reduce using rule 54 (variables)]
    KWPRINT   reduce using rule 53 (variables)
    KWPRINT   [reduce using rule 54 (variables)]
    KWREAD    reduce using rule 53 (variables)
    KWREAD    [reduce using rule 54 (variables)]
    KWRETURN  reduce using rule 53 (variables)
    KWRETURN  [reduce using rule 54 (variables)]
    KWWHILE   reduce using rule 53 (variables)
    KWWHILE   [reduce using rule 54 (variables)]
    $default  reduce using rule 53 (variables)

    variable   go to state 22
    variables  go to state 43


State 23

   51 compound: KWBEGIN variables . statements KWEND

    KWBEGIN   shift, and go to state 16
    IDENT     shift, and go to state 44
    KWFOR     shift, and go to state 45
    KWIF      shift, and go to state 46
    KWPRINT   shift, and go to state 47
    KWREAD    shift, and go to state 48
    KWRETURN  shift, and go to state 49
    KWWHILE   shift, and go to state 50

    $default  reduce using rule 118 (statements)

    statement            go to state 51
    compound             go to state 52
    simple               go to state 53
    variable_reference   go to state 54
    array_reference      go to state 55
    function_invocation  go to state 56
    conditional          go to state 57
    statements           go to state 58
    while                go to state 59
    for                  go to state 60
    return               go to state 61


State 24

    1 program: programname SEMICOLON programbody compound KWEND . IDENT

    IDENT  shift, and go to state 62


State 25

    9 function: functionname '(' functionarguments . ')' functionbody SEMICOLON
   10         | functionname '(' functionarguments . ')' functionbody SEMICOLON compound KWEND IDENT

    ')'  shift, and go to state 63


State 26

   27 functionarguments: functionargument .
   28                  | functionargument . SEMICOLON functionarguments

    SEMICOLON  shift, and go to state 64

    $default  reduce using rule 27 (functionarguments)


State 27

   29 functionargument: identifier_list . ':' type

    ':'  shift, and go to state 65


State 28

   31 identifier_list: identifier ',' identifier_list .

    $default  reduce using rule 31 (identifier_list)


State 29

   34 variable: KWVAR identifier_list ':' SEMICOLON .

    $default  reduce using rule 34 (variable)


State 30

   14 type: KWARRAY .
   19     | KWARRAY . integer_constant KWTO integer_constant KWOF type

    INTEGER  shift, and go to state 66

    $default  reduce using rule 14 (type)

    integer_constant  go to state 67


State 31

   15 type: KWBOOLEAN .

    $default  reduce using rule 15 (type)


State 32

   21 type_num: KWFALSE .

    $default  reduce using rule 21 (type_num)


State 33

   16 type: KWINTEGER .

    $default  reduce using rule 16 (type)


State 34

   18 type: KWREAL .

    $default  reduce using rule 18 (type)


State 35

   17 type: KWSTRING .

    $default  reduce using rule 17 (type)


State 36

   20 type_num: KWTRUE .

    $default  reduce using rule 20 (type_num)


State 37

   22 type_num: INTEGER .

    $default  reduce using rule 22 (type_num)


State 38

   24 type_num: FLOAT .

    $default  reduce using rule 24 (type_num)


State 39

   25 type_num: SCIENTIFIC .

    $default  reduce using rule 25 (type_num)


State 40

   23 type_num: STRING .

    $default  reduce using rule 23 (type_num)


State 41

   32 variable: KWVAR identifier_list ':' type . SEMICOLON

    SEMICOLON  shift, and go to state 68


State 42

   33 variable: KWVAR identifier_list ':' type_num . SEMICOLON

    SEMICOLON  shift, and go to state 69


State 43

   52 variables: variable variables .

    $default  reduce using rule 52 (variables)


State 44

   59 variable_reference: IDENT .
   62 array_reference: IDENT . arrays
   93 function_invocation: IDENT . '(' expressions ')'

    '('  shift, and go to state 70
    '['  shift, and go to state 71

    $default  reduce using rule 59 (variable_reference)

    arrays  go to state 72
    array   go to state 73


State 45

  132 for: KWFOR . IDENT IDENTEQUAL integer_constant KWTO integer_constant KWDO statements KWEND KWDO

    IDENT  shift, and go to state 74


State 46

  116 conditional: KWIF . boolean_expr KWTHEN statements KWELSE statements KWEND KWIF
  117            | KWIF . boolean_expr KWTHEN statements KWEND KWIF

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83
    '-'         shift, and go to state 84
    '('         shift, and go to state 85

    literal_constant     go to state 86
    array_exp            go to state 87
    expr_b               go to state 88
    exp                  go to state 89
    function_invocation  go to state 90
    boolean_expr         go to state 91


State 47

   56 simple: KWPRINT . variable_reference SEMICOLON
   57       | KWPRINT . expression SEMICOLON

    IDENT       shift, and go to state 92
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83
    '-'         shift, and go to state 93
    '('         shift, and go to state 94

    literal_constant     go to state 86
    variable_reference   go to state 95
    array_reference      go to state 55
    array_exp            go to state 87
    expression           go to state 96
    exp                  go to state 97
    function_invocation  go to state 98


State 48

   58 simple: KWREAD . variable_reference SEMICOLON

    IDENT  shift, and go to state 44

    variable_reference   go to state 99
    array_reference      go to state 55
    function_invocation  go to state 100


State 49

  133 return: KWRETURN . expression SEMICOLON

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83
    '-'         shift, and go to state 93
    '('         shift, and go to state 94

    literal_constant     go to state 86
    array_exp            go to state 87
    expression           go to state 101
    exp                  go to state 97
    function_invocation  go to state 90


State 50

  131 while: KWWHILE . boolean_expr KWDO statements KWEND KWDO

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83
    '-'         shift, and go to state 84
    '('         shift, and go to state 85

    literal_constant     go to state 86
    array_exp            go to state 87
    expr_b               go to state 88
    exp                  go to state 89
    function_invocation  go to state 90
    boolean_expr         go to state 102


State 51

  119 statements: statement .
  120           | statement . statements

    KWBEGIN   shift, and go to state 16
    IDENT     shift, and go to state 44
    KWFOR     shift, and go to state 45
    KWIF      shift, and go to state 46
    KWPRINT   shift, and go to state 47
    KWREAD    shift, and go to state 48
    KWRETURN  shift, and go to state 49
    KWWHILE   shift, and go to state 50

    KWEND     reduce using rule 118 (statements)
    KWEND     [reduce using rule 119 (statements)]
    KWELSE    reduce using rule 118 (statements)
    KWELSE    [reduce using rule 119 (statements)]
    $default  reduce using rule 118 (statements)

    statement            go to state 51
    compound             go to state 52
    simple               go to state 53
    variable_reference   go to state 54
    array_reference      go to state 55
    function_invocation  go to state 56
    conditional          go to state 57
    statements           go to state 103
    while                go to state 59
    for                  go to state 60
    return               go to state 61


State 52

   45 statement: compound .

    $default  reduce using rule 45 (statement)


State 53

   46 statement: simple .

    $default  reduce using rule 46 (statement)


State 54

   55 simple: variable_reference . IDENTEQUAL expression SEMICOLON

    IDENTEQUAL  shift, and go to state 104


State 55

   60 variable_reference: array_reference .

    $default  reduce using rule 60 (variable_reference)


State 56

   44 statement: function_invocation . SEMICOLON
   61 variable_reference: function_invocation .

    SEMICOLON  shift, and go to state 105

    $default  reduce using rule 61 (variable_reference)


State 57

   47 statement: conditional .

    $default  reduce using rule 47 (statement)


State 58

   51 compound: KWBEGIN variables statements . KWEND

    KWEND  shift, and go to state 106


State 59

   48 statement: while .

    $default  reduce using rule 48 (statement)


State 60

   49 statement: for .

    $default  reduce using rule 49 (statement)


State 61

   50 statement: return .

    $default  reduce using rule 50 (statement)


State 62

    1 program: programname SEMICOLON programbody compound KWEND IDENT .

    $default  reduce using rule 1 (program)


State 63

    9 function: functionname '(' functionarguments ')' . functionbody SEMICOLON
   10         | functionname '(' functionarguments ')' . functionbody SEMICOLON compound KWEND IDENT

    ':'  shift, and go to state 107

    $default  reduce using rule 12 (functionbody)

    functionbody  go to state 108


State 64

   28 functionarguments: functionargument SEMICOLON . functionarguments

    IDENT  shift, and go to state 1

    $default  reduce using rule 26 (functionarguments)

    identifier         go to state 14
    functionarguments  go to state 109
    functionargument   go to state 26
    identifier_list    go to state 27


State 65

   29 functionargument: identifier_list ':' . type

    KWARRAY    shift, and go to state 30
    KWBOOLEAN  shift, and go to state 31
    KWINTEGER  shift, and go to state 33
    KWREAL     shift, and go to state 34
    KWSTRING   shift, and go to state 35

    type  go to state 110


State 66

   35 integer_constant: INTEGER .

    $default  reduce using rule 35 (integer_constant)


State 67

   19 type: KWARRAY integer_constant . KWTO integer_constant KWOF type

    KWTO  shift, and go to state 111


State 68

   32 variable: KWVAR identifier_list ':' type SEMICOLON .

    $default  reduce using rule 32 (variable)


State 69

   33 variable: KWVAR identifier_list ':' type_num SEMICOLON .

    $default  reduce using rule 33 (variable)


State 70

   93 function_invocation: IDENT '(' . expressions ')'

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83
    '-'         shift, and go to state 93
    '('         shift, and go to state 94

    $default  reduce using rule 96 (expressions)

    literal_constant     go to state 86
    array_exp            go to state 87
    expression           go to state 112
    exp                  go to state 97
    function_invocation  go to state 90
    expressions          go to state 113


State 71

   65 array: '[' . integer_expression ']'

    IDENT    shift, and go to state 114
    INTEGER  shift, and go to state 115
    '-'      shift, and go to state 116

    integer_expression   go to state 117
    int_exp              go to state 118
    array_exp            go to state 119
    function_invocation  go to state 120


State 72

   62 array_reference: IDENT arrays .

    $default  reduce using rule 62 (array_reference)


State 73

   63 arrays: array .
   64       | array . arrays

    '['  shift, and go to state 71

    $default  reduce using rule 63 (arrays)

    arrays  go to state 121
    array   go to state 73


State 74

  132 for: KWFOR IDENT . IDENTEQUAL integer_constant KWTO integer_constant KWDO statements KWEND KWDO

    IDENTEQUAL  shift, and go to state 122


State 75

   73 array_exp: IDENT . int_arr_expressions
   90 exp: IDENT .
   93 function_invocation: IDENT . '(' expressions ')'

    '('  shift, and go to state 70
    '['  shift, and go to state 123

    $default  reduce using rule 90 (exp)

    int_arr_expressions  go to state 124


State 76

   43 literal_constant: KWFALSE .

    $default  reduce using rule 43 (literal_constant)


State 77

   37 literal_constant: KWREAL .

    $default  reduce using rule 37 (literal_constant)


State 78

   42 literal_constant: KWTRUE .

    $default  reduce using rule 42 (literal_constant)


State 79

   36 literal_constant: INTEGER .

    $default  reduce using rule 36 (literal_constant)


State 80

   38 literal_constant: OCTAL .

    $default  reduce using rule 38 (literal_constant)


State 81

   39 literal_constant: FLOAT .

    $default  reduce using rule 39 (literal_constant)


State 82

   40 literal_constant: SCIENTIFIC .

    $default  reduce using rule 40 (literal_constant)


State 83

   41 literal_constant: STRING .

    $default  reduce using rule 41 (literal_constant)


State 84

   85 expr_b: '-' . exp

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83

    literal_constant     go to state 86
    array_exp            go to state 87
    exp                  go to state 125
    function_invocation  go to state 90


State 85

   83 expr_b: '(' . exp ')'
   86       | '(' . '-' exp ')'
   88       | '(' . expr_b ')'

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83
    '-'         shift, and go to state 126
    '('         shift, and go to state 85

    literal_constant     go to state 86
    array_exp            go to state 87
    expr_b               go to state 127
    exp                  go to state 128
    function_invocation  go to state 90


State 86

   89 exp: literal_constant .

    $default  reduce using rule 89 (exp)


State 87

   92 exp: array_exp .

    $default  reduce using rule 92 (exp)


State 88

  121 boolean_expr: expr_b . bool_operator expr_b

    LS   shift, and go to state 129
    LE   shift, and go to state 130
    SE   shift, and go to state 131
    NOT  shift, and go to state 132
    AND  shift, and go to state 133
    OR   shift, and go to state 134
    '<'  shift, and go to state 135
    '='  shift, and go to state 136
    '>'  shift, and go to state 137

    bool_operator  go to state 138


State 89

   82 expr_b: exp .
   84       | exp . ')'
   87       | exp . operator_b expr_b

    MOD  shift, and go to state 139
    '-'  shift, and go to state 140
    '+'  shift, and go to state 141
    ')'  shift, and go to state 142
    '*'  shift, and go to state 143
    '/'  shift, and go to state 144

    ')'       [reduce using rule 82 (expr_b)]
    $default  reduce using rule 82 (expr_b)

    operator_b  go to state 145


State 90

   91 exp: function_invocation .

    $default  reduce using rule 91 (exp)


State 91

  116 conditional: KWIF boolean_expr . KWTHEN statements KWELSE statements KWEND KWIF
  117            | KWIF boolean_expr . KWTHEN statements KWEND KWIF

    KWTHEN  shift, and go to state 146


State 92

   59 variable_reference: IDENT .
   62 array_reference: IDENT . arrays
   73 array_exp: IDENT . int_arr_expressions
   90 exp: IDENT .
   93 function_invocation: IDENT . '(' expressions ')'

    '('  shift, and go to state 70
    '['  shift, and go to state 147

    SEMICOLON  reduce using rule 59 (variable_reference)
    SEMICOLON  [reduce using rule 90 (exp)]
    $default   reduce using rule 90 (exp)

    arrays               go to state 72
    array                go to state 73
    int_arr_expressions  go to state 124


State 93

   78 expression: '-' . exp

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83

    literal_constant     go to state 86
    array_exp            go to state 87
    exp                  go to state 148
    function_invocation  go to state 90


State 94

   77 expression: '(' . exp ')'
   79           | '(' . '-' exp ')'
   81           | '(' . expression ')'

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83
    '-'         shift, and go to state 149
    '('         shift, and go to state 94

    literal_constant     go to state 86
    array_exp            go to state 87
    expression           go to state 150
    exp                  go to state 151
    function_invocation  go to state 90


State 95

   56 simple: KWPRINT variable_reference . SEMICOLON

    SEMICOLON  shift, and go to state 152


State 96

   57 simple: KWPRINT expression . SEMICOLON

    SEMICOLON  shift, and go to state 153


State 97

   76 expression: exp .
   80           | exp . operator expression

    MOD  shift, and go to state 154
    LS   shift, and go to state 155
    LE   shift, and go to state 156
    SE   shift, and go to state 157
    NOT  shift, and go to state 158
    AND  shift, and go to state 159
    OR   shift, and go to state 160
    '-'  shift, and go to state 161
    '+'  shift, and go to state 162
    '<'  shift, and go to state 163
    '='  shift, and go to state 164
    '*'  shift, and go to state 165
    '/'  shift, and go to state 166
    '>'  shift, and go to state 167

    $default  reduce using rule 76 (expression)

    operator  go to state 168


State 98

   61 variable_reference: function_invocation .
   91 exp: function_invocation .

    SEMICOLON  reduce using rule 61 (variable_reference)
    SEMICOLON  [reduce using rule 91 (exp)]
    $default   reduce using rule 91 (exp)


State 99

   58 simple: KWREAD variable_reference . SEMICOLON

    SEMICOLON  shift, and go to state 169


State 100

   61 variable_reference: function_invocation .

    $default  reduce using rule 61 (variable_reference)


State 101

  133 return: KWRETURN expression . SEMICOLON

    SEMICOLON  shift, and go to state 170


State 102

  131 while: KWWHILE boolean_expr . KWDO statements KWEND KWDO

    KWDO  shift, and go to state 171


State 103

  120 statements: statement statements .

    $default  reduce using rule 120 (statements)


State 104

   55 simple: variable_reference IDENTEQUAL . expression SEMICOLON

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83
    '-'         shift, and go to state 93
    '('         shift, and go to state 94

    literal_constant     go to state 86
    array_exp            go to state 87
    expression           go to state 172
    exp                  go to state 97
    function_invocation  go to state 90


State 105

   44 statement: function_invocation SEMICOLON .

    $default  reduce using rule 44 (statement)


State 106

   51 compound: KWBEGIN variables statements KWEND .

    $default  reduce using rule 51 (compound)


State 107

   13 functionbody: ':' . type

    KWARRAY    shift, and go to state 30
    KWBOOLEAN  shift, and go to state 31
    KWINTEGER  shift, and go to state 33
    KWREAL     shift, and go to state 34
    KWSTRING   shift, and go to state 35

    type  go to state 173


State 108

    9 function: functionname '(' functionarguments ')' functionbody . SEMICOLON
   10         | functionname '(' functionarguments ')' functionbody . SEMICOLON compound KWEND IDENT

    SEMICOLON  shift, and go to state 174


State 109

   28 functionarguments: functionargument SEMICOLON functionarguments .

    $default  reduce using rule 28 (functionarguments)


State 110

   29 functionargument: identifier_list ':' type .

    $default  reduce using rule 29 (functionargument)


State 111

   19 type: KWARRAY integer_constant KWTO . integer_constant KWOF type

    INTEGER  shift, and go to state 66

    integer_constant  go to state 175


State 112

   94 expressions: expression . ',' expressions
   95            | expression .

    ','  shift, and go to state 176

    $default  reduce using rule 95 (expressions)


State 113

   93 function_invocation: IDENT '(' expressions . ')'

    ')'  shift, and go to state 177


State 114

   70 int_exp: IDENT .
   73 array_exp: IDENT . int_arr_expressions
   93 function_invocation: IDENT . '(' expressions ')'

    '('  shift, and go to state 70
    '['  shift, and go to state 123

    $default  reduce using rule 70 (int_exp)

    int_arr_expressions  go to state 124


State 115

   69 int_exp: INTEGER .

    $default  reduce using rule 69 (int_exp)


State 116

   68 integer_expression: '-' . int_exp

    IDENT    shift, and go to state 114
    INTEGER  shift, and go to state 115

    int_exp              go to state 178
    array_exp            go to state 119
    function_invocation  go to state 120


State 117

   65 array: '[' integer_expression . ']'
   66 integer_expression: integer_expression . operator int_exp

    MOD  shift, and go to state 154
    LS   shift, and go to state 155
    LE   shift, and go to state 156
    SE   shift, and go to state 157
    NOT  shift, and go to state 158
    AND  shift, and go to state 159
    OR   shift, and go to state 160
    '-'  shift, and go to state 161
    '+'  shift, and go to state 162
    '<'  shift, and go to state 163
    '='  shift, and go to state 164
    ']'  shift, and go to state 179
    '*'  shift, and go to state 165
    '/'  shift, and go to state 166
    '>'  shift, and go to state 167

    operator  go to state 180


State 118

   67 integer_expression: int_exp .

    $default  reduce using rule 67 (integer_expression)


State 119

   72 int_exp: array_exp .

    $default  reduce using rule 72 (int_exp)


State 120

   71 int_exp: function_invocation .

    $default  reduce using rule 71 (int_exp)


State 121

   64 arrays: array arrays .

    $default  reduce using rule 64 (arrays)


State 122

  132 for: KWFOR IDENT IDENTEQUAL . integer_constant KWTO integer_constant KWDO statements KWEND KWDO

    INTEGER  shift, and go to state 66

    integer_constant  go to state 181


State 123

   74 int_arr_expressions: '[' . integer_expression ']' int_arr_expressions
   75                    | '[' . integer_expression ']'

    IDENT    shift, and go to state 114
    INTEGER  shift, and go to state 115
    '-'      shift, and go to state 116

    integer_expression   go to state 182
    int_exp              go to state 118
    array_exp            go to state 119
    function_invocation  go to state 120


State 124

   73 array_exp: IDENT int_arr_expressions .

    $default  reduce using rule 73 (array_exp)


State 125

   85 expr_b: '-' exp .

    $default  reduce using rule 85 (expr_b)


State 126

   85 expr_b: '-' . exp
   86       | '(' '-' . exp ')'

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83

    literal_constant     go to state 86
    array_exp            go to state 87
    exp                  go to state 183
    function_invocation  go to state 90


State 127

   88 expr_b: '(' expr_b . ')'

    ')'  shift, and go to state 184


State 128

   82 expr_b: exp .
   83       | '(' exp . ')'
   84       | exp . ')'
   87       | exp . operator_b expr_b

    MOD  shift, and go to state 139
    '-'  shift, and go to state 140
    '+'  shift, and go to state 141
    ')'  shift, and go to state 185
    '*'  shift, and go to state 143
    '/'  shift, and go to state 144

    ')'  [reduce using rule 82 (expr_b)]

    operator_b  go to state 145


State 129

  127 bool_operator: LS .

    $default  reduce using rule 127 (bool_operator)


State 130

  125 bool_operator: LE .

    $default  reduce using rule 125 (bool_operator)


State 131

  123 bool_operator: SE .

    $default  reduce using rule 123 (bool_operator)


State 132

  128 bool_operator: NOT .

    $default  reduce using rule 128 (bool_operator)


State 133

  129 bool_operator: AND .

    $default  reduce using rule 129 (bool_operator)


State 134

  130 bool_operator: OR .

    $default  reduce using rule 130 (bool_operator)


State 135

  122 bool_operator: '<' .

    $default  reduce using rule 122 (bool_operator)


State 136

  124 bool_operator: '=' .

    $default  reduce using rule 124 (bool_operator)


State 137

  126 bool_operator: '>' .

    $default  reduce using rule 126 (bool_operator)


State 138

  121 boolean_expr: expr_b bool_operator . expr_b

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83
    '-'         shift, and go to state 84
    '('         shift, and go to state 85

    literal_constant     go to state 86
    array_exp            go to state 87
    expr_b               go to state 186
    exp                  go to state 89
    function_invocation  go to state 90


State 139

  114 operator_b: MOD .

    $default  reduce using rule 114 (operator_b)


State 140

  111 operator_b: '-' .

    $default  reduce using rule 111 (operator_b)


State 141

  115 operator_b: '+' .

    $default  reduce using rule 115 (operator_b)


State 142

   84 expr_b: exp ')' .

    $default  reduce using rule 84 (expr_b)


State 143

  112 operator_b: '*' .

    $default  reduce using rule 112 (operator_b)


State 144

  113 operator_b: '/' .

    $default  reduce using rule 113 (operator_b)


State 145

   87 expr_b: exp operator_b . expr_b

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83
    '-'         shift, and go to state 84
    '('         shift, and go to state 85

    literal_constant     go to state 86
    array_exp            go to state 87
    expr_b               go to state 187
    exp                  go to state 89
    function_invocation  go to state 90


State 146

  116 conditional: KWIF boolean_expr KWTHEN . statements KWELSE statements KWEND KWIF
  117            | KWIF boolean_expr KWTHEN . statements KWEND KWIF

    KWBEGIN   shift, and go to state 16
    IDENT     shift, and go to state 44
    KWFOR     shift, and go to state 45
    KWIF      shift, and go to state 46
    KWPRINT   shift, and go to state 47
    KWREAD    shift, and go to state 48
    KWRETURN  shift, and go to state 49
    KWWHILE   shift, and go to state 50

    $default  reduce using rule 118 (statements)

    statement            go to state 51
    compound             go to state 52
    simple               go to state 53
    variable_reference   go to state 54
    array_reference      go to state 55
    function_invocation  go to state 56
    conditional          go to state 57
    statements           go to state 188
    while                go to state 59
    for                  go to state 60
    return               go to state 61


State 147

   65 array: '[' . integer_expression ']'
   74 int_arr_expressions: '[' . integer_expression ']' int_arr_expressions
   75                    | '[' . integer_expression ']'

    IDENT    shift, and go to state 114
    INTEGER  shift, and go to state 115
    '-'      shift, and go to state 116

    integer_expression   go to state 189
    int_exp              go to state 118
    array_exp            go to state 119
    function_invocation  go to state 120


State 148

   78 expression: '-' exp .

    $default  reduce using rule 78 (expression)


State 149

   78 expression: '-' . exp
   79           | '(' '-' . exp ')'

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83

    literal_constant     go to state 86
    array_exp            go to state 87
    exp                  go to state 190
    function_invocation  go to state 90


State 150

   81 expression: '(' expression . ')'

    ')'  shift, and go to state 191


State 151

   76 expression: exp .
   77           | '(' exp . ')'
   80           | exp . operator expression

    MOD  shift, and go to state 154
    LS   shift, and go to state 155
    LE   shift, and go to state 156
    SE   shift, and go to state 157
    NOT  shift, and go to state 158
    AND  shift, and go to state 159
    OR   shift, and go to state 160
    '-'  shift, and go to state 161
    '+'  shift, and go to state 162
    '<'  shift, and go to state 163
    '='  shift, and go to state 164
    ')'  shift, and go to state 192
    '*'  shift, and go to state 165
    '/'  shift, and go to state 166
    '>'  shift, and go to state 167

    ')'  [reduce using rule 76 (expression)]

    operator  go to state 168


State 152

   56 simple: KWPRINT variable_reference SEMICOLON .

    $default  reduce using rule 56 (simple)


State 153

   57 simple: KWPRINT expression SEMICOLON .

    $default  reduce using rule 57 (simple)


State 154

  100 operator: MOD .

    $default  reduce using rule 100 (operator)


State 155

  107 operator: LS .

    $default  reduce using rule 107 (operator)


State 156

  105 operator: LE .

    $default  reduce using rule 105 (operator)


State 157

  103 operator: SE .

    $default  reduce using rule 103 (operator)


State 158

  108 operator: NOT .

    $default  reduce using rule 108 (operator)


State 159

  109 operator: AND .

    $default  reduce using rule 109 (operator)


State 160

  110 operator: OR .

    $default  reduce using rule 110 (operator)


State 161

   97 operator: '-' .

    $default  reduce using rule 97 (operator)


State 162

  101 operator: '+' .

    $default  reduce using rule 101 (operator)


State 163

  102 operator: '<' .

    $default  reduce using rule 102 (operator)


State 164

  104 operator: '=' .

    $default  reduce using rule 104 (operator)


State 165

   98 operator: '*' .

    $default  reduce using rule 98 (operator)


State 166

   99 operator: '/' .

    $default  reduce using rule 99 (operator)


State 167

  106 operator: '>' .

    $default  reduce using rule 106 (operator)


State 168

   80 expression: exp operator . expression

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83
    '-'         shift, and go to state 93
    '('         shift, and go to state 94

    literal_constant     go to state 86
    array_exp            go to state 87
    expression           go to state 193
    exp                  go to state 97
    function_invocation  go to state 90


State 169

   58 simple: KWREAD variable_reference SEMICOLON .

    $default  reduce using rule 58 (simple)


State 170

  133 return: KWRETURN expression SEMICOLON .

    $default  reduce using rule 133 (return)


State 171

  131 while: KWWHILE boolean_expr KWDO . statements KWEND KWDO

    KWBEGIN   shift, and go to state 16
    IDENT     shift, and go to state 44
    KWFOR     shift, and go to state 45
    KWIF      shift, and go to state 46
    KWPRINT   shift, and go to state 47
    KWREAD    shift, and go to state 48
    KWRETURN  shift, and go to state 49
    KWWHILE   shift, and go to state 50

    $default  reduce using rule 118 (statements)

    statement            go to state 51
    compound             go to state 52
    simple               go to state 53
    variable_reference   go to state 54
    array_reference      go to state 55
    function_invocation  go to state 56
    conditional          go to state 57
    statements           go to state 194
    while                go to state 59
    for                  go to state 60
    return               go to state 61


State 172

   55 simple: variable_reference IDENTEQUAL expression . SEMICOLON

    SEMICOLON  shift, and go to state 195


State 173

   13 functionbody: ':' type .

    $default  reduce using rule 13 (functionbody)


State 174

    9 function: functionname '(' functionarguments ')' functionbody SEMICOLON .
   10         | functionname '(' functionarguments ')' functionbody SEMICOLON . compound KWEND IDENT

    KWBEGIN  shift, and go to state 16

    KWBEGIN   [reduce using rule 9 (function)]
    $default  reduce using rule 9 (function)

    compound  go to state 196


State 175

   19 type: KWARRAY integer_constant KWTO integer_constant . KWOF type

    KWOF  shift, and go to state 197


State 176

   94 expressions: expression ',' . expressions

    IDENT       shift, and go to state 75
    KWFALSE     shift, and go to state 76
    KWREAL      shift, and go to state 77
    KWTRUE      shift, and go to state 78
    INTEGER     shift, and go to state 79
    OCTAL       shift, and go to state 80
    FLOAT       shift, and go to state 81
    SCIENTIFIC  shift, and go to state 82
    STRING      shift, and go to state 83
    '-'         shift, and go to state 93
    '('         shift, and go to state 94

    $default  reduce using rule 96 (expressions)

    literal_constant     go to state 86
    array_exp            go to state 87
    expression           go to state 112
    exp                  go to state 97
    function_invocation  go to state 90
    expressions          go to state 198


State 177

   93 function_invocation: IDENT '(' expressions ')' .

    $default  reduce using rule 93 (function_invocation)


State 178

   68 integer_expression: '-' int_exp .

    $default  reduce using rule 68 (integer_expression)


State 179

   65 array: '[' integer_expression ']' .

    $default  reduce using rule 65 (array)


State 180

   66 integer_expression: integer_expression operator . int_exp

    IDENT    shift, and go to state 114
    INTEGER  shift, and go to state 115

    int_exp              go to state 199
    array_exp            go to state 119
    function_invocation  go to state 120


State 181

  132 for: KWFOR IDENT IDENTEQUAL integer_constant . KWTO integer_constant KWDO statements KWEND KWDO

    KWTO  shift, and go to state 200


State 182

   66 integer_expression: integer_expression . operator int_exp
   74 int_arr_expressions: '[' integer_expression . ']' int_arr_expressions
   75                    | '[' integer_expression . ']'

    MOD  shift, and go to state 154
    LS   shift, and go to state 155
    LE   shift, and go to state 156
    SE   shift, and go to state 157
    NOT  shift, and go to state 158
    AND  shift, and go to state 159
    OR   shift, and go to state 160
    '-'  shift, and go to state 161
    '+'  shift, and go to state 162
    '<'  shift, and go to state 163
    '='  shift, and go to state 164
    ']'  shift, and go to state 201
    '*'  shift, and go to state 165
    '/'  shift, and go to state 166
    '>'  shift, and go to state 167

    operator  go to state 180


State 183

   85 expr_b: '-' exp .
   86       | '(' '-' exp . ')'

    ')'  shift, and go to state 202

    ')'  [reduce using rule 85 (expr_b)]


State 184

   88 expr_b: '(' expr_b ')' .

    $default  reduce using rule 88 (expr_b)


State 185

   83 expr_b: '(' exp ')' .
   84       | exp ')' .

    ')'       reduce using rule 83 (expr_b)
    ')'       [reduce using rule 84 (expr_b)]
    $default  reduce using rule 83 (expr_b)


State 186

  121 boolean_expr: expr_b bool_operator expr_b .

    $default  reduce using rule 121 (boolean_expr)


State 187

   87 expr_b: exp operator_b expr_b .

    $default  reduce using rule 87 (expr_b)


State 188

  116 conditional: KWIF boolean_expr KWTHEN statements . KWELSE statements KWEND KWIF
  117            | KWIF boolean_expr KWTHEN statements . KWEND KWIF

    KWEND   shift, and go to state 203
    KWELSE  shift, and go to state 204


State 189

   65 array: '[' integer_expression . ']'
   66 integer_expression: integer_expression . operator int_exp
   74 int_arr_expressions: '[' integer_expression . ']' int_arr_expressions
   75                    | '[' integer_expression . ']'

    MOD  shift, and go to state 154
    LS   shift, and go to state 155
    LE   shift, and go to state 156
    SE   shift, and go to state 157
    NOT  shift, and go to state 158
    AND  shift, and go to state 159
    OR   shift, and go to state 160
    '-'  shift, and go to state 161
    '+'  shift, and go to state 162
    '<'  shift, and go to state 163
    '='  shift, and go to state 164
    ']'  shift, and go to state 205
    '*'  shift, and go to state 165
    '/'  shift, and go to state 166
    '>'  shift, and go to state 167

    operator  go to state 180


State 190

   78 expression: '-' exp .
   79           | '(' '-' exp . ')'

    ')'  shift, and go to state 206

    ')'  [reduce using rule 78 (expression)]


State 191

   81 expression: '(' expression ')' .

    $default  reduce using rule 81 (expression)


State 192

   77 expression: '(' exp ')' .

    $default  reduce using rule 77 (expression)


State 193

   80 expression: exp operator expression .

    $default  reduce using rule 80 (expression)


State 194

  131 while: KWWHILE boolean_expr KWDO statements . KWEND KWDO

    KWEND  shift, and go to state 207


State 195

   55 simple: variable_reference IDENTEQUAL expression SEMICOLON .

    $default  reduce using rule 55 (simple)


State 196

   10 function: functionname '(' functionarguments ')' functionbody SEMICOLON compound . KWEND IDENT

    KWEND  shift, and go to state 208


State 197

   19 type: KWARRAY integer_constant KWTO integer_constant KWOF . type

    KWARRAY    shift, and go to state 30
    KWBOOLEAN  shift, and go to state 31
    KWINTEGER  shift, and go to state 33
    KWREAL     shift, and go to state 34
    KWSTRING   shift, and go to state 35

    type  go to state 209


State 198

   94 expressions: expression ',' expressions .

    $default  reduce using rule 94 (expressions)


State 199

   66 integer_expression: integer_expression operator int_exp .

    $default  reduce using rule 66 (integer_expression)


State 200

  132 for: KWFOR IDENT IDENTEQUAL integer_constant KWTO . integer_constant KWDO statements KWEND KWDO

    INTEGER  shift, and go to state 66

    integer_constant  go to state 210


State 201

   74 int_arr_expressions: '[' integer_expression ']' . int_arr_expressions
   75                    | '[' integer_expression ']' .

    '['  shift, and go to state 123

    $default  reduce using rule 75 (int_arr_expressions)

    int_arr_expressions  go to state 211


State 202

   86 expr_b: '(' '-' exp ')' .

    $default  reduce using rule 86 (expr_b)


State 203

  117 conditional: KWIF boolean_expr KWTHEN statements KWEND . KWIF

    KWIF  shift, and go to state 212


State 204

  116 conditional: KWIF boolean_expr KWTHEN statements KWELSE . statements KWEND KWIF

    KWBEGIN   shift, and go to state 16
    IDENT     shift, and go to state 44
    KWFOR     shift, and go to state 45
    KWIF      shift, and go to state 46
    KWPRINT   shift, and go to state 47
    KWREAD    shift, and go to state 48
    KWRETURN  shift, and go to state 49
    KWWHILE   shift, and go to state 50

    $default  reduce using rule 118 (statements)

    statement            go to state 51
    compound             go to state 52
    simple               go to state 53
    variable_reference   go to state 54
    array_reference      go to state 55
    function_invocation  go to state 56
    conditional          go to state 57
    statements           go to state 213
    while                go to state 59
    for                  go to state 60
    return               go to state 61


State 205

   65 array: '[' integer_expression ']' .
   74 int_arr_expressions: '[' integer_expression ']' . int_arr_expressions
   75                    | '[' integer_expression ']' .

    '['  shift, and go to state 123

    SEMICOLON  reduce using rule 65 (array)
    SEMICOLON  [reduce using rule 75 (int_arr_expressions)]
    '['        [reduce using rule 65 (array)]
    $default   reduce using rule 75 (int_arr_expressions)

    int_arr_expressions  go to state 211


State 206

   79 expression: '(' '-' exp ')' .

    $default  reduce using rule 79 (expression)


State 207

  131 while: KWWHILE boolean_expr KWDO statements KWEND . KWDO

    KWDO  shift, and go to state 214


State 208

   10 function: functionname '(' functionarguments ')' functionbody SEMICOLON compound KWEND . IDENT

    IDENT  shift, and go to state 215


State 209

   19 type: KWARRAY integer_constant KWTO integer_constant KWOF type .

    $default  reduce using rule 19 (type)


State 210

  132 for: KWFOR IDENT IDENTEQUAL integer_constant KWTO integer_constant . KWDO statements KWEND KWDO

    KWDO  shift, and go to state 216


State 211

   74 int_arr_expressions: '[' integer_expression ']' int_arr_expressions .

    $default  reduce using rule 74 (int_arr_expressions)


State 212

  117 conditional: KWIF boolean_expr KWTHEN statements KWEND KWIF .

    $default  reduce using rule 117 (conditional)


State 213

  116 conditional: KWIF boolean_expr KWTHEN statements KWELSE statements . KWEND KWIF

    KWEND  shift, and go to state 217


State 214

  131 while: KWWHILE boolean_expr KWDO statements KWEND KWDO .

    $default  reduce using rule 131 (while)


State 215

   10 function: functionname '(' functionarguments ')' functionbody SEMICOLON compound KWEND IDENT .

    $default  reduce using rule 10 (function)


State 216

  132 for: KWFOR IDENT IDENTEQUAL integer_constant KWTO integer_constant KWDO . statements KWEND KWDO

    KWBEGIN   shift, and go to state 16
    IDENT     shift, and go to state 44
    KWFOR     shift, and go to state 45
    KWIF      shift, and go to state 46
    KWPRINT   shift, and go to state 47
    KWREAD    shift, and go to state 48
    KWRETURN  shift, and go to state 49
    KWWHILE   shift, and go to state 50

    $default  reduce using rule 118 (statements)

    statement            go to state 51
    compound             go to state 52
    simple               go to state 53
    variable_reference   go to state 54
    array_reference      go to state 55
    function_invocation  go to state 56
    conditional          go to state 57
    statements           go to state 218
    while                go to state 59
    for                  go to state 60
    return               go to state 61


State 217

  116 conditional: KWIF boolean_expr KWTHEN statements KWELSE statements KWEND . KWIF

    KWIF  shift, and go to state 219


State 218

  132 for: KWFOR IDENT IDENTEQUAL integer_constant KWTO integer_constant KWDO statements . KWEND KWDO

    KWEND  shift, and go to state 220


State 219

  116 conditional: KWIF boolean_expr KWTHEN statements KWELSE statements KWEND KWIF .

    $default  reduce using rule 116 (conditional)


State 220

  132 for: KWFOR IDENT IDENTEQUAL integer_constant KWTO integer_constant KWDO statements KWEND . KWDO

    KWDO  shift, and go to state 221


State 221

  132 for: KWFOR IDENT IDENTEQUAL integer_constant KWTO integer_constant KWDO statements KWEND KWDO .

    $default  reduce using rule 132 (for)
